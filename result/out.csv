
6,method,,definition,CannotEvaluateException,       public CannotEvaluateException() {
9,method,,definition,CannotEvaluateException,       public CannotEvaluateException(String message) {
19,method,,call,newArrayList,       private static final List VALUES = new ArrayList(14);
20,method,,call,newColorInterpretation,       public static final ColorInterpretation UNDEFINED = new ColorInterpretation("UNDEFINED");
21,method,,call,newColorInterpretation,       public static final ColorInterpretation GRAY_INDEX = new ColorInterpretation("GRAY_INDEX");
22,method,,call,newColorInterpretation,       public static final ColorInterpretation PALETTE_INDEX = new ColorInterpretation("PALETTE_INDEX");
23,method,,call,newColorInterpretation,       public static final ColorInterpretation RED_BAND = new ColorInterpretation("RED_BAND");
24,method,,call,newColorInterpretation,       public static final ColorInterpretation GREEN_BAND = new ColorInterpretation("GREEN_BAND");
25,method,,call,newColorInterpretation,       public static final ColorInterpretation BLUE_BAND = new ColorInterpretation("BLUE_BAND");
26,method,,call,newColorInterpretation,       public static final ColorInterpretation ALPHA_BAND = new ColorInterpretation("ALPHA_BAND");
27,method,,call,newColorInterpretation,       public static final ColorInterpretation HUE_BAND = new ColorInterpretation("HUE_BAND");
28,method,,call,newColorInterpretation,       public static final ColorInterpretation SATURATION_BAND = new ColorInterpretation("SATURATION_BAND");
29,method,,call,newColorInterpretation,       public static final ColorInterpretation LIGHTNESS_BAND = new ColorInterpretation("LIGHTNESS_BAND");
30,method,,call,newColorInterpretation,       public static final ColorInterpretation CYAN_BAND = new ColorInterpretation("CYAN_BAND");
31,method,,call,newColorInterpretation,       public static final ColorInterpretation MAGENTA_BAND = new ColorInterpretation("MAGENTA_BAND");
32,method,,call,newColorInterpretation,       public static final ColorInterpretation YELLOW_BAND = new ColorInterpretation("YELLOW_BAND");
33,method,,call,newColorInterpretation,       public static final ColorInterpretation BLACK_BAND = new ColorInterpretation("BLACK_BAND");
34,method,,definition,ColorInterpretation,       public ColorInterpretation(final String name) {
37,method,,definition,values,       public static ColorInterpretation[] values() {
39,method,,call,VALUES.toArray,            return (ColorInterpretation[]) VALUESDottttTtoArray(new ColorInterpretation[VALUESDottttTsize()]);
39,method,,call,VALUES.size,            return (ColorInterpretation[]) VALUESDottttTtoArray(new ColorInterpretation[VALUESDottttTsize()]);
42,method,,definition,family,       public CodeList[] family() {
43,method,,call,values,        return values();
53,method,,call,getCoordinateReferenceSystem,       CoordinateReferenceSystem getCoordinateReferenceSystem();
54,method,,call,getEnvelope,       Envelope getEnvelope();
55,method,,call,]getDimensionNames,       String[] getDimensionNames();
56,method,,call,getNumSampleDimensions,       int getNumSampleDimensions();
57,method,,call,getSampleDimension,       SampleDimension getSampleDimension(int index) throws IndexOutOfBoundsException;
58,method,,call,getNumSources,       int getNumSources();
59,method,,call,getSource,       Coverage getSource(int sourceDataIndex) throws IndexOutOfBoundsException;
60,method,,call,]getMetadataNames,       String[] getMetadataNames();
61,method,,call,getMetadataValue,       String getMetadataValue(String name) throws MetadataNameNotFoundException;
62,method,,call,evaluate,       Object evaluate(DirectPosition point) throws CannotEvaluateException;
63,method,,call,]evaluate,       boolean[] evaluate(DirectPosition point, boolean[] destination)            throws CannotEvaluateException, ArrayIndexOutOfBoundsException;
64,method,,call,]evaluate,       byte[] evaluate(DirectPosition point, byte[] destination)            throws CannotEvaluateException, ArrayIndexOutOfBoundsException;
65,method,,call,]evaluate,       int[] evaluate(DirectPosition point, int[] destination)            throws CannotEvaluateException, ArrayIndexOutOfBoundsException;
66,method,,call,]evaluate,       double[] evaluate(DirectPosition point, float[] destination)            throws CannotEvaluateException, ArrayIndexOutOfBoundsException;
67,method,,call,]evaluate,       double[] evaluate(DirectPosition point, double[] destination)            throws CannotEvaluateException, ArrayIndexOutOfBoundsException;
68,method,,call,getRenderableImage,           RenderableImage getRenderableImage(int xAxis, int yAxis)            throws UnsupportedOperationException, IndexOutOfBoundsException;
76,method,,call,newArrayList,       private static final List VALUES = new ArrayList(2);
77,method,,call,newByteInValuePacking,       public static final ByteInValuePacking WKB_XDR = new ByteInValuePacking("WKB_XDR");
78,method,,call,newByteInValuePacking,       public static final ByteInValuePacking WKB_NDR = new ByteInValuePacking("WKB_NDR");
79,method,,definition,ByteInValuePacking,       public ByteInValuePacking(final String name) {
82,method,,definition,values,       public static ByteInValuePacking[] values() {
84,method,,call,VALUES.toArray,            return (ByteInValuePacking[]) VALUESDottttTtoArray(new ByteInValuePacking[VALUESDottttTsize()]);
84,method,,call,VALUES.size,            return (ByteInValuePacking[]) VALUESDottttTtoArray(new ByteInValuePacking[VALUESDottttTsize()]);
87,method,,definition,family,       public CodeList[] family() {
88,method,,call,values,        return values();
95,method,,definition,CannotCreateGridCoverageException,       public CannotCreateGridCoverageException() {
98,method,,definition,CannotCreateGridCoverageException,       public CannotCreateGridCoverageException(String message) {
108,method,,call,isDataEditable,       boolean isDataEditable();
109,method,,call,getGridPacking,       GridPacking getGridPacking();
110,method,,call,getGridGeometry,       GridGeometry getGridGeometry();
111,method,,call,]getOptimalDataBlockSizes,       int[] getOptimalDataBlockSizes();
112,method,,call,getNumOverviews,       int getNumOverviews();
113,method,,call,getOverviewGridGeometry,       GridGeometry getOverviewGridGeometry(int overviewIndex) throws IndexOutOfBoundsException;
114,method,,call,getOverview,       GridCoverage getOverview(int overviewIndex) throws IndexOutOfBoundsException;
115,method,,call,]getDataBlock,          boolean[] getDataBlock(GridRange gridRange, boolean[] destination)            throws InvalidRangeException, ArrayIndexOutOfBoundsException;
116,method,,call,]getDataBlock,       byte[] getDataBlock(GridRange gridRange, byte[] destination)            throws InvalidRangeException, ArrayIndexOutOfBoundsException;
117,method,,call,]getDataBlock,       short[] getDataBlock(GridRange gridRange, short[] destination)            throws InvalidRangeException, ArrayIndexOutOfBoundsException;
118,method,,call,]getDataBlock,       int[] getDataBlock(GridRange gridRange, int[] destination)            throws InvalidRangeException, ArrayIndexOutOfBoundsException;
119,method,,call,]getDataBlock,       float[] getDataBlock(GridRange gridRange, float[] destination)            throws InvalidRangeException, ArrayIndexOutOfBoundsException;
120,method,,call,]getDataBlock,       double[] getDataBlock(GridRange gridRange, double[] destination)            throws InvalidRangeException, ArrayIndexOutOfBoundsException;
121,method,,call,]getPackedDataBlock,       byte[] getPackedDataBlock(GridRange gridRange) throws InvalidRangeException;
122,method,,call,setDataBlock,       void setDataBlock(GridRange gridRange, boolean[] values)            throws InvalidRangeException, GridNotEditableException, ArrayIndexOutOfBoundsException;
123,method,,call,setDataBlock,       void setDataBlock(GridRange gridRange, byte[] values)            throws InvalidRangeException, GridNotEditableException, ArrayIndexOutOfBoundsException;
124,method,,call,setDataBlock,       void setDataBlock(GridRange gridRange, short[] values)            throws InvalidRangeException, GridNotEditableException, ArrayIndexOutOfBoundsException;
125,method,,call,setDataBlock,       void setDataBlock(GridRange gridRange, int[] values)            throws InvalidRangeException, GridNotEditableException, ArrayIndexOutOfBoundsException;
126,method,,call,setDataBlock,       void setDataBlock(GridRange gridRange, float[] values)            throws InvalidRangeException, GridNotEditableException, ArrayIndexOutOfBoundsException;
127,method,,call,setDataBlock,       void setDataBlock(GridRange gridRange, double[] values)            throws InvalidRangeException, GridNotEditableException, ArrayIndexOutOfBoundsException;
128,method,,call,setPackedDataBlock,       void setPackedDataBlock(GridRange gridRange, byte[] values)            throws InvalidRangeException, GridNotEditableException, ArrayIndexOutOfBoundsException;
133,method,,call,getGridRange,       GridRange getGridRange();
134,method,,call,getGridToCoordinateSystem,       MathTransform getGridToCoordinateSystem();
139,method,,definition,GridNotEditableException,       public GridNotEditableException() {
142,method,,definition,GridNotEditableException,       public GridNotEditableException(String message) {
149,method,,call,getByteInValuePacking,       ByteInValuePacking getByteInValuePacking();
150,method,,call,getValueInBytePacking,       ValueInBytePacking getValueInBytePacking();
151,method,,call,getBandPacking,       int getBandPacking();
155,method,,call,]getLower,       int[] getLower();
156,method,,call,]getUpper,       int[] getUpper();
161,method,,definition,InvalidRangeException,       public InvalidRangeException() {
164,method,,definition,InvalidRangeException,       public InvalidRangeException(String message) {
175,method,,call,newArrayList,       private static final List VALUES = new ArrayList(2);
176,method,,call,newValueInBytePacking,       public static final ValueInBytePacking LO_BIT_FIRST = new ValueInBytePacking("LO_BIT_FIRST");
177,method,,call,newValueInBytePacking,       public static final ValueInBytePacking HI_BIT_FIRST = new ValueInBytePacking("HI_BIT_FIRST");
178,method,,definition,ValueInBytePacking,       public ValueInBytePacking(final String name) {
181,method,,definition,values,       public static ValueInBytePacking[] values() {
183,method,,call,VALUES.toArray,            return (ValueInBytePacking[]) VALUESDottttTtoArray(new ValueInBytePacking[VALUESDottttTsize()]);
183,method,,call,VALUES.size,            return (ValueInBytePacking[]) VALUESDottttTtoArray(new ValueInBytePacking[VALUESDottttTsize()]);
186,method,,definition,family,       public CodeList[] family() {
187,method,,call,values,        return values();
193,method,,definition,MetadataNameNotFoundException,       public MetadataNameNotFoundException() {
196,method,,definition,MetadataNameNotFoundException,       public MetadataNameNotFoundException(String message) {
207,method,,call,newArrayList,       private static final List VALUES = new ArrayList(4);
208,method,,call,newPaletteInterpretation,       public static final PaletteInterpretation GRAY = new PaletteInterpretation("GRAY");
209,method,,call,newPaletteInterpretation,       public static final PaletteInterpretation RGB = new PaletteInterpretation("RGB");
210,method,,call,newPaletteInterpretation,       public static final PaletteInterpretation CMYK = new PaletteInterpretation("CMYK");
211,method,,call,newPaletteInterpretation,       public static final PaletteInterpretation HLS = new PaletteInterpretation("HLS");
212,method,,definition,PaletteInterpretation,       public PaletteInterpretation(final String name) {
215,method,,definition,values,       public static PaletteInterpretation[] values() {
217,method,,call,VALUES.toArray,            return (PaletteInterpretation[]) VALUESDottttTtoArray(new PaletteInterpretation[VALUESDottttTsize()]);
217,method,,call,VALUES.size,            return (PaletteInterpretation[]) VALUESDottttTtoArray(new PaletteInterpretation[VALUESDottttTsize()]);
220,method,,definition,family,       public CodeList[] family() {
221,method,,call,values,        return values();
228,method,,definition,PointOutsideCoverageException,           public PointOutsideCoverageException() {
231,method,,definition,PointOutsideCoverageException,           public PointOutsideCoverageException(String message) {
244,method,,call,]getMetadataNames,       String[] getMetadataNames();
245,method,,call,getMetadataValue,       String getMetadataValue(String name) throws MetadataNameNotFoundException;
246,method,,call,getNumOperations,       int getNumOperations();
247,method,,call,getOperation,       Operation getOperation(int index) throws IndexOutOfBoundsException;
248,method,,call,analyse,       GridAnalysis analyse(GridCoverage gridCoverage);
249,method,,call,doOperation,       GridCoverage doOperation(String operationName, GeneralParameterValue[] parameters)            throws OperationNotFoundException, ParameterNotFoundException,                   InvalidParameterNameException, InvalidParameterValueException;
254,method,,definition,InvalidSampleDimensionException,       public InvalidSampleDimensionException() {
257,method,,definition,InvalidSampleDimensionException,       public InvalidSampleDimensionException(String message) {
264,method,,call,getName,       String getName();
265,method,,call,getDescription,       String getDescription();
266,method,,call,getVendor,       String getVendor();
267,method,,call,getDocURL,       String getDocURL();
268,method,,call,getVersion,       String getVersion();
269,method,,call,getNumSources,       int getNumSources();
270,method,,call,]getParameters,       GeneralOperationParameter[] getParameters();
275,method,,definition,OperationNotFoundException,       public OperationNotFoundException() {
278,method,,definition,OperationNotFoundException,       public OperationNotFoundException(String message) {
286,method,,call,getDescription,       String getDescription();
287,method,,call,getSampleDimensionType,       SampleDimensionType getSampleDimensionType();
288,method,,call,]getCategoryNames,       String[] getCategoryNames();
289,method,,call,getColorInterpretation,       ColorInterpretation getColorInterpretation();
290,method,,call,getPaletteInterpretation,       PaletteInterpretation getPaletteInterpretation();
291,method,,call,]getPalette,       int[][] getPalette();
292,method,,call,]getNoDataValues,       double[] getNoDataValues();
293,method,,call,getMinimumValue,       double getMinimumValue();
294,method,,call,getMaximumValue,       double getMaximumValue();
295,method,,call,getUnits,       Unit getUnits();
296,method,,call,getOffset,       double getOffset();
297,method,,call,getScale,       double getScale();
298,method,,call,getSampleToGeophysics,       MathTransform1D getSampleToGeophysics();
299,method,,call,]getMetaDataNames,       String[] getMetaDataNames();
300,method,,call,getMetadataValue,       String getMetadataValue(String name) throws MetadataNameNotFoundException;
309,method,,call,newArrayList,       private static final List VALUES = new ArrayList(11);
310,method,,call,newSampleDimensionType,       public static final SampleDimensionType UNSIGNED_1BIT = new SampleDimensionType("UNSIGNED_1BIT");
311,method,,call,newSampleDimensionType,       public static final SampleDimensionType UNSIGNED_2BITS = new SampleDimensionType("UNSIGNED_2BITS");
312,method,,call,newSampleDimensionType,       public static final SampleDimensionType UNSIGNED_4BITS = new SampleDimensionType("UNSIGNED_4BITS");
313,method,,call,newSampleDimensionType,       public static final SampleDimensionType UNSIGNED_8BITS = new SampleDimensionType("UNSIGNED_8BITS");
314,method,,call,newSampleDimensionType,       public static final SampleDimensionType SIGNED_8BITS = new SampleDimensionType("SIGNED_8BITS");
315,method,,call,newSampleDimensionType,       public static final SampleDimensionType UNSIGNED_16BITS = new SampleDimensionType("UNSIGNED_16BITS");
316,method,,call,newSampleDimensionType,       public static final SampleDimensionType SIGNED_16BITS = new SampleDimensionType("SIGNED_16BITS");
317,method,,call,newSampleDimensionType,       public static final SampleDimensionType UNSIGNED_32BITS = new SampleDimensionType("UNSIGNED_32BITS");
318,method,,call,newSampleDimensionType,       public static final SampleDimensionType SIGNED_32BITS = new SampleDimensionType("SIGNED_32BITS");
319,method,,call,newSampleDimensionType,       public static final SampleDimensionType REAL_32BITS = new SampleDimensionType("REAL_32BITS");
320,method,,call,newSampleDimensionType,       public static final SampleDimensionType REAL_64BITS = new SampleDimensionType("REAL_64BITS");
321,method,,definition,SampleDimensionType,       public SampleDimensionType(final String name) {
324,method,,definition,values,       public static SampleDimensionType[] values() {
326,method,,call,VALUES.toArray,            return (SampleDimensionType[]) VALUESDottttTtoArray(new SampleDimensionType[VALUESDottttTsize()]);
326,method,,call,VALUES.size,            return (SampleDimensionType[]) VALUESDottttTtoArray(new SampleDimensionType[VALUESDottttTsize()]);
329,method,,definition,family,       public CodeList[] family() {
330,method,,call,values,        return values();
337,method,,call,]getSupportedBounds,       Class[] getSupportedBounds();
338,method,,call,]getSupportedDirectPositions,       Class[] getSupportedDirectPositions();
339,method,,call,]getSupportedDirectPositions,       Class[] getSupportedDirectPositions(CoordinateReferenceSystem crs);
340,method,,call,]getSupportedSpatialSchemaObjects,       Class[] getSupportedSpatialSchemaObjects(CoordinateReferenceSystem crs);
341,method,,call,]getSupportedOrientations,       Class[] getSupportedOrientations();
342,method,,call,]getSupportedOrientations,       Class[] getSupportedOrientations(CoordinateReferenceSystem crs);
343,method,,call,]getSupportedGeometries,       Class[] getSupportedGeometries();
344,method,,call,]getSupportedCoordinateReferenceSystems,       String[] getSupportedCoordinateReferenceSystems();
345,method,,call,]getSupportedDatums,       String[] getSupportedDatums();
346,method,,call,]getSupportedPathTypes,       PathType[] getSupportedPathTypes();
347,method,,call,]getSupportedProjections,       String[] getSupportedProjections();
356,method,,call,getCapabilities,       public CommonCapabilities getCapabilities();
357,method,,call,getBoundsFactory,              public BoundsFactory getBoundsFactory();
358,method,,call,getCRSFactory,       public CRSFactory getCRSFactory();
359,method,,call,getCRSAuthorityFactory,           public CRSAuthorityFactory getCRSAuthorityFactory();
360,method,,call,getDatumAuthorityFactory,              public DatumAuthorityFactory getDatumAuthorityFactory();
361,method,,call,getDatumFactory,           public DatumFactory getDatumFactory();
373,method,,call,dispose,           void dispose();
374,method,,call,disposeEventManagers,       void disposeEventManagers();
375,method,,call,getUID,           String getUID();
376,method,,call,setTitle,       void setTitle(String title);
377,method,,call,getTitle,       String getTitle();
378,method,,call,getFactory,       DisplayFactory getFactory();
379,method,,call,getState,       CanvasState getState();
380,method,,call,isVisible,       boolean isVisible(DirectPosition coordinate);
381,method,,call,add,           Graphic add(Graphic graphic);
382,method,,call,addAsEditable,       Graphic addAsEditable(Graphic graphic);
383,method,,call,remove,       void remove(Graphic graphic);
384,method,,call,findEventManager,       EventManager findEventManager(Class eventManagerClass);
385,method,,call,addEventManager,       void addEventManager(EventManager eventManager);
386,method,,call,getTopGraphicAt,       Graphic getTopGraphicAt(DirectPosition directPosition);
387,method,,call,]getGraphicsAt,       Graphic[] getGraphicsAt(DirectPosition directPosition);
388,method,,call,]getGraphicsIn,       Graphic[] getGraphicsIn(BoundingRectangle bounds);
389,method,,call,addCanvasListener,           void addCanvasListener(CanvasListener listener);
390,method,,call,removeCanvasListener,       void removeCanvasListener(CanvasListener listener);
391,method,,call,enableCanvasHandler,           void enableCanvasHandler(CanvasHandler handler);
392,method,,call,removeCanvasHandler,       void removeCanvasHandler(CanvasHandler handler);
393,method,,call,getActiveCanvasHandler,       CanvasHandler getActiveCanvasHandler();
394,method,,call,setImplHint,           void setImplHint(String hintName, Object hint);
395,method,,call,getImplHint,       Object getImplHint(String hintName);
396,method,,call,getDisplayCoordinateReferenceSystem,           CoordinateReferenceSystem getDisplayCoordinateReferenceSystem();
397,method,,call,getObjectiveCoordinateReferenceSystem,       CoordinateReferenceSystem getObjectiveCoordinateReferenceSystem();
398,method,,call,setObjectiveCoordinateReferenceSystem,       void setObjectiveCoordinateReferenceSystem(CoordinateReferenceSystem crs);
399,method,,call,setObjectiveCoordinateReferenceSystem,           void setObjectiveCoordinateReferenceSystem(CoordinateReferenceSystem crs, MathTransform objectiveToDisplay,                                 MathTransform displayToObjective) throws IncompatibleOperationException;
400,method,,call,getObjectiveToDisplayTransform,       MathTransform getObjectiveToDisplayTransform();
401,method,,call,getDisplayToObjectiveTransform,           MathTransform getDisplayToObjectiveTransform();
406,method,,call,setCenter,       public void setCenter(DirectPosition newCenter);
410,method,,call,handlerEnabled,       public void handlerEnabled(CanvasController controller);
411,method,,call,handlerRemoved,       public void handlerRemoved();
415,method,,call,canvasChanged,       public void canvasChanged(Canvas canvas, CanvasState newState);
420,method,,call,getTitle,       public String getTitle();
421,method,,call,getCenter,       public DirectPosition getCenter();
422,method,,call,clone,       public Object clone() throws CloneNotSupportedException;
423,method,,call,equals,       public boolean equals(Object object);
439,method,,call,]getSupportedPrimitives,           public Class[] getSupportedPrimitives();
440,method,,call,isEventManagerSupported,           public boolean isEventManagerSupported(Class eventManagerClass);
441,method,,call,isBacklightingSupported,           public boolean isBacklightingSupported();
442,method,,call,isLineWidthSupported,           public boolean isLineWidthSupported();
443,method,,call,isLineGapSupported,           public boolean isLineGapSupported();
444,method,,call,]getSupportedArrowStyles,           public ArrowStyle[] getSupportedArrowStyles();
445,method,,call,]getSupportedLineStyles,           public LineStyle[] getSupportedLineStyles();
446,method,,call,]getSupportedLineJoins,           public LineJoin[] getSupportedLineJoins();
447,method,,call,]getSupportedLineCaps,           public LineCap[] getSupportedLineCaps();
448,method,,call,isDashPatternSupported,           public boolean isDashPatternSupported();
449,method,,call,isBlinkSupported,           public boolean isBlinkSupported();
450,method,,call,]getSupportedFillStyles,           public FillStyle[] getSupportedFillStyles();
451,method,,call,]getSupportedFillPatterns,           public FillPattern[] getSupportedFillPatterns();
452,method,,call,]getSupportedMarks,           public Mark[] getSupportedMarks();
453,method,,call,]getSupportedLinePatterns,           public LinePattern[] getSupportedLinePatterns();
454,method,,call,]getSupportedXAnchors,           public XAnchor[] getSupportedXAnchors();
455,method,,call,]getSupportedYAnchors,           public YAnchor[] getSupportedYAnchors();
456,method,,call,isGradientSupported,           public boolean isGradientSupported();
457,method,,call,getDefaultGraphicStyle,           public GraphicStyle getDefaultGraphicStyle();
458,method,,call,]getSupportedSymbologies,           public SymbologyInfo[] getSupportedSymbologies();
466,method,,call,createGraphic,       public Graphic createGraphic(Class implementsGraphic);
467,method,,call,getCapabilities,       public DisplayCapabilities getCapabilities();
468,method,,call,createCanvas,           public Canvas createCanvas(Properties canvasProperties, Container container);
469,method,,call,createCanvas,           public Canvas createCanvas(Properties canvasProperties);
470,method,,call,getCanvas,           public Canvas getCanvas(String uid);
477,method,,call,getID,       public int getID();
482,method,,call,aggregationChanged,                   public void aggregationChanged(AggregationChangeEvent event);
487,method,,call,voidhandlerEnabled,       public abstract void handlerEnabled();
488,method,,call,voidhandlerDisabled,       public abstract void handlerDisabled();
489,method,,call,voidhandlerRemoved,       public abstract void handlerRemoved();
503,method,,call,getID,                   public int getID();
508,method,,call,getGraphic,                   public Graphic getGraphic();
509,method,,call,consume,       public void consume();
510,method,,call,isConsumed,       public boolean isConsumed();
515,method,,call,getKeyEvent,       public KeyEvent getKeyEvent();
520,method,,call,mouseClicked,       public void mouseClicked(GraphicMouseEvent ge);
521,method,,call,mousePressed,       public void mousePressed(GraphicMouseEvent ge);
522,method,,call,mouseReleased,       public void mouseReleased(GraphicMouseEvent ge);
523,method,,call,mouseDwelled,       public void mouseDwelled(GraphicMouseEvent ge);
524,method,,call,graphicSelected,       public void graphicSelected(GraphicChangeEvent ge);
525,method,,call,graphicDeselected,       public void graphicDeselected(GraphicChangeEvent ge);
526,method,,call,graphicDisposed,       public void graphicDisposed(GraphicChangeEvent ge);
527,method,,call,graphicEditableStart,       public void graphicEditableStart(GraphicChangeEvent ge);
528,method,,call,graphicEditableChanged,       public void graphicEditableChanged(GraphicChangeEvent ge);
529,method,,call,graphicEditableEnd,       public void graphicEditableEnd(GraphicChangeEvent ge);
530,method,,call,graphicChanged,       public void graphicChanged(GraphicChangeEvent ge);
539,method,,call,getID,           public int getID();
540,method,,call,getMouseEvent,                   public MouseEvent getMouseEvent();
548,method,,call,enableKeyHandler,       public void enableKeyHandler(KeyHandler keyHandler);
549,method,,call,pushKeyHandler,       public void pushKeyHandler(KeyHandler keyHandler);
550,method,,call,removeKeyHandler,       public void removeKeyHandler(KeyHandler keyHandler);
551,method,,call,replaceKeyHandler,       public boolean replaceKeyHandler(KeyHandler existingHandler,                                     KeyHandler replacementHandler);
552,method,,call,getCurrentKeyHandler,       public KeyHandler getCurrentKeyHandler();
553,method,,call,]getFallbackKeyHandlers,       public KeyHandler[] getFallbackKeyHandlers();
562,method,,call,enableMouseHandler,       public void enableMouseHandler(MouseHandler mouseHandler);
563,method,,call,pushMouseHandler,       public void pushMouseHandler(MouseHandler mouseHandler);
564,method,,call,removeMouseHandler,       public void removeMouseHandler(MouseHandler mouseHandler);
565,method,,call,replaceMouseHandler,       public boolean replaceMouseHandler(MouseHandler existingHandler,        MouseHandler replacementHandler);
566,method,,call,getCurrentMouseHandler,       public MouseHandler getCurrentMouseHandler();
567,method,,call,]getFallbackMouseHandlers,       public MouseHandler[] getFallbackMouseHandlers();
573,method,,call,setChildren,       public void setChildren(Graphic[] children);
574,method,,call,]getChildren,       public Graphic[] getChildren();
575,method,,call,addChild,       public Graphic addChild(Graphic child);
576,method,,call,removeChild,       public Graphic removeChild(Graphic child);
577,method,,call,removeChildren,       public void removeChildren();
578,method,,call,replaceChild,       public Graphic replaceChild(Graphic oldChild, Graphic newChild);
579,method,,call,getChildCount,       public int getChildCount();
580,method,,call,addAggregationListener,       public void addAggregationListener(AggregationListener listener);
581,method,,call,removeAggregationListener,       public void removeAggregationListener(AggregationListener listener);
582,method,,call,aggregationChanged,       public void aggregationChanged(AggregationChangeEvent event);
588,method,,definition,GeometryNotSupportedException,       public GeometryNotSupportedException(Geometry geometry) {
592,method,,definition,getGeometry,       public Geometry getGeometry() {
601,method,,call,dispose,           public void dispose();
602,method,,call,refresh,       public void refresh();
603,method,,call,setName,           public void setName(String name);
604,method,,call,getName,       public String getName();
605,method,,call,setParent,       public void setParent(Graphic parent);
606,method,,call,getParent,       public Graphic getParent();
607,method,,call,getGraphicStyle,       public GraphicStyle getGraphicStyle();
608,method,,call,getClientProperty,       public Object getClientProperty(Object key);
609,method,,call,putClientProperty,       public void putClientProperty(Object key, Object value);
610,method,,call,setPassingEventsToParent,       public void setPassingEventsToParent(boolean passToParent);
611,method,,call,isPassingEventsToParent,       public boolean isPassingEventsToParent();
612,method,,call,setShowingEditHandles,       public void setShowingEditHandles(boolean showingHandles);
613,method,,call,isShowingEditHandles,       public boolean isShowingEditHandles();
614,method,,call,setShowingAnchorHandles,       public void setShowingAnchorHandles(boolean showingHandles);
615,method,,call,isShowingAnchorHandles,       public boolean isShowingAnchorHandles();
616,method,,call,cloneGraphic,           public Graphic cloneGraphic();
617,method,,call,addGraphicListener,           public void addGraphicListener(GraphicListener listener);
618,method,,call,removeGraphicListener,       public void removeGraphicListener(GraphicListener listener);
619,method,,call,fireGraphicEvent,       public void fireGraphicEvent(GraphicEvent ge);
631,method,,call,setArc,       public void setArc(        DirectPosition center,        double width,        double height,        Unit lengthUnit,        double rotation,        double start,        double end,        Unit angleUnit);
632,method,,call,setCenter,       public void setCenter(DirectPosition center);
633,method,,call,getCenter,       public DirectPosition getCenter();
634,method,,call,setWidth,       public void setWidth(double width, Unit unit);
635,method,,call,getWidth,       public double getWidth(Unit unit);
636,method,,call,setHeight,       public void setHeight(double height, Unit unit);
637,method,,call,getHeight,       public double getHeight(Unit unit);
638,method,,call,setConic,       public void setConic(Conic conic) throws GeometryNotSupportedException;
639,method,,call,getConic,           public Conic getConic();
640,method,,call,setRotation,       public void setRotation(double rotation, Unit unit);
641,method,,call,getRotation,       public double getRotation(Unit unit);
642,method,,call,setStart,       public void setStart(double start, Unit unit);
643,method,,call,getStart,       public double getStart(Unit unit);
644,method,,call,setEnd,       public void setEnd(double end, Unit unit);
645,method,,call,getEnd,       public double getEnd(Unit unit);
646,method,,call,setClosureType,       public void setClosureType(ArcClosure closureType);
647,method,,call,getClosureType,       public ArcClosure getClosureType();
648,method,,call,isAllowingRotation,       public boolean isAllowingRotation();
649,method,,call,setAllowingRotation,       public void setAllowingRotation(boolean newValue);
650,method,,call,isCircle,       public boolean isCircle();
651,method,,call,isClosedEllipse,       public boolean isClosedEllipse();
652,method,,call,isAllowingExtentsChange,           public boolean isAllowingExtentsChange();
653,method,,call,setAllowingExtentsChange,       public void setAllowingExtentsChange(boolean newValue);
654,method,,call,setClosurePathType,           public void setClosurePathType(PathType pathType);
655,method,,call,getClosurePathType,       public PathType getClosurePathType();
657,method,,call,newArrayList,           private static final List VALUES = new ArrayList(3);
658,method,,call,newArcClosure,               public static final ArcClosure OPEN = new ArcClosure("Open", "");
659,method,,call,newArcClosure,               public static final ArcClosure CHORD = new ArcClosure("Chord", "");
660,method,,call,newArcClosure,               public static final ArcClosure PIE = new ArcClosure("Pie", "");
661,method,,definition,ArcClosure,                                                                       private ArcClosure(String name, String description) {
664,method,,definition,getArray,                      public static ArcClosure[] getArray() {
665,method,,call,values,            return values();
667,method,,definition,values,               public static ArcClosure[] values() {
669,method,,call,VALUES.toArray,            return (ArcClosure[]) VALUESDottttTtoArray(new ArcClosure[VALUESDottttTsize()]);
669,method,,call,VALUES.size,            return (ArcClosure[]) VALUESDottttTtoArray(new ArcClosure[VALUESDottttTsize()]);
672,method,,definition,family,       public CodeList[] family() {
673,method,,call,values,        return values();
682,method,,call,setCompositeCurve,           public void setCompositeCurve(CompositeCurve compositeCurve) throws GeometryNotSupportedException;
683,method,,call,getCompositeCurve,           public CompositeCurve getCompositeCurve();
684,method,,call,isClosed,       public boolean isClosed();
685,method,,call,setSegments,               public void setSegments(Graphic[] segments);
686,method,,call,replaceSegment,           public Graphic replaceSegment(Graphic oldSegment, Graphic newSegment);
687,method,,call,removeSegments,           public void removeSegments();
688,method,,call,removeSegment,           public Graphic removeSegment(Graphic segment);
689,method,,call,removeSegment,           public Graphic removeSegment(int index);
690,method,,call,isValid,           public boolean isValid();
691,method,,call,insertSegment,           public Graphic insertSegment(int index, Graphic segment);
692,method,,call,]getSegments,           public Graphic[] getSegments();
693,method,,call,getSegmentCount,           public int getSegmentCount();
694,method,,call,getSegment,           public Graphic getSegment(int index);
695,method,,call,addSegment,           public Graphic addSegment(Graphic segment);
696,method,,call,addAggregationListener,                       public void addAggregationListener(AggregationListener listener);
697,method,,call,removeAggregationListener,                   public void removeAggregationListener(AggregationListener listener);
698,method,,call,aggregationChanged,                       public void aggregationChanged(AggregationChangeEvent event);
706,method,,call,setCurveSegment,       public void setCurveSegment(CurveSegment curveSegment);
707,method,,call,getCurveSegment,       public CurveSegment getCurveSegment();
708,method,,call,getPointArray,       public PointArray getPointArray();
709,method,,call,setPointArray,       public void setPointArray(PointArray pointArray);
710,method,,call,]getPoints,       public DirectPosition[] getPoints();
711,method,,call,setPoints,       public void setPoints(DirectPosition[] coords);
712,method,,call,addPoint,       public void addPoint(DirectPosition coord);
713,method,,call,deletePoint,       public void deletePoint(int index);
714,method,,call,getPoint,       public DirectPosition getPoint(int index);
715,method,,call,insertPoint,       public void insertPoint(int index, DirectPosition coord);
716,method,,call,setPoint,       public void setPoint(int index, DirectPosition coord);
717,method,,call,isClosed,       public boolean isClosed();
718,method,,call,setClosed,       public void setClosed(boolean closed);
719,method,,call,isAllowingNewVertices,           public boolean isAllowingNewVertices();
720,method,,call,setAllowingNewVertices,       public void setAllowingNewVertices(boolean newValue);
721,method,,call,setPathType,           public void setPathType(PathType pathType);
722,method,,call,getPathType,       public PathType getPathType();
730,method,,call,setIcon,       public void setIcon(Icon icon);
731,method,,call,getIcon,       public Icon getIcon();
732,method,,call,setPosition,       public void setPosition(DirectPosition coord);
733,method,,call,getPosition,       public DirectPosition getPosition();
734,method,,call,setRotation,       public void setRotation(double angle, Unit unit);
735,method,,call,getRotation,       public double getRotation(Unit unit);
736,method,,call,setOffset,       public void setOffset(Point2D offset);
737,method,,call,getOffset,       public Point2D getOffset();
738,method,,call,isAllowingRotation,       public boolean isAllowingRotation();
739,method,,call,setAllowingRotation,       public void setAllowingRotation(boolean newValue);
747,method,,call,setText,       public void setText(String text);
748,method,,call,getText,       public String getText();
749,method,,call,setPosition,       public void setPosition(DirectPosition coord);
750,method,,call,getPosition,       public DirectPosition getPosition();
751,method,,call,setXAnchor,       public void setXAnchor(XAnchor xAnchor);
752,method,,call,getXAnchor,       public XAnchor getXAnchor();
753,method,,call,setYAnchor,       public void setYAnchor(YAnchor yAnchor);
754,method,,call,getYAnchor,       public YAnchor getYAnchor();
755,method,,call,setRotation,       public void setRotation(double rotation, Unit unit);
756,method,,call,getRotation,       public double getRotation(Unit unit);
757,method,,call,isAllowingRotation,       public boolean isAllowingRotation();
758,method,,call,setAllowingRotation,       public void setAllowingRotation(boolean newValue);
763,method,,call,setRing,           public void setRing(Ring ring);
764,method,,call,getRing,           public Ring getRing();
772,method,,call,setEnvelope,           public void setEnvelope(Envelope envelope);
773,method,,call,getEnvelope,           public Envelope getEnvelope();
774,method,,call,setScaledImage,           public void setScaledImage(RenderedImage image);
775,method,,call,getScaledImage,           public RenderedImage getScaledImage();
776,method,,call,setUpperLeft,           public void setUpperLeft(DirectPosition coord);
777,method,,call,getUpperLeft,           public DirectPosition getUpperLeft();
778,method,,call,setLowerRight,           public void setLowerRight(DirectPosition coord);
779,method,,call,getLowerRight,           public DirectPosition getLowerRight();
780,method,,call,setIntensity,           public void setIntensity(int intensity);
781,method,,call,getIntensity,           public int getIntensity();
782,method,,call,setTransparency,           public void setTransparency(int transparency);
783,method,,call,getTransparency,           public int getTransparency();
784,method,,call,setCRS,           public void setCRS(CoordinateReferenceSystem crs);
785,method,,call,getCRS,           public CoordinateReferenceSystem getCRS();
790,method,,call,setSurfaceBoundary,           public void setSurfaceBoundary(SurfaceBoundary surfaceBoundary);
791,method,,call,getSurfaceBoundary,           public SurfaceBoundary getSurfaceBoundary();
792,method,,call,getExterior,           public GraphicRing getExterior();
793,method,,call,setExterior,       public void setExterior(GraphicRing exterior);
794,method,,call,]getInteriors,               public GraphicRing[] getInteriors();
795,method,,call,setInteriors,                          public void setInteriors(GraphicRing[] interiors);
802,method,,call,addAnchorPoint,           public void addAnchorPoint(DirectPosition anchor);
803,method,,call,deleteAnchorPoint,           public void deleteAnchorPoint(int index) throws IndexOutOfBoundsException;
804,method,,call,getAnchorPoint,           public DirectPosition getAnchorPoint(int index)         throws IndexOutOfBoundsException;
805,method,,call,insertAnchorPoint,           public void insertAnchorPoint(int index, DirectPosition anchor)         throws IndexOutOfBoundsException;
806,method,,call,setAnchorPoint,           public void setAnchorPoint(int index, DirectPosition anchor)         throws IndexOutOfBoundsException;
807,method,,call,setAnchorPoints,           public void setAnchorPoints(DirectPosition[] anchors);
808,method,,call,]getAnchorPoints,           public DirectPosition[] getAnchorPoints();
809,method,,call,setAnchorPointArray,           public void setAnchorPointArray(PointArray pointArray);
810,method,,call,getAnchorPointArray,           public PointArray getAnchorPointArray();
811,method,,call,getSymbology,           public Symbology getSymbology(String symbologyName);
812,method,,call,getActiveSymbology,           public String getActiveSymbology();
813,method,,call,setActiveSymbology,           public void setActiveSymbology(String symbologyName) throws IllegalArgumentException;
814,method,,call,getSymbologyVersion,           public String getSymbologyVersion();
815,method,,call,setSymbologyVersion,       public void setSymbologyVersion(String symbologyVersion) throws IllegalArgumentException;
819,method,,call,insertChild,       public Graphic insertChild(int index, Graphic child);
820,method,,call,getChild,       public Graphic getChild(int index);
821,method,,call,removeChild,       public Graphic removeChild(int index);
829,method,,call,newArrayList,                   private static final List VALUES = new ArrayList(4);
830,method,,call,newArrowStyle,       public static final ArrowStyle NONE = new ArrowStyle("NONE", "No arrow head will be drawn");
831,method,,call,newArrowStyle,       public static final ArrowStyle OPEN_ARROW =        new ArrowStyle("OPEN_ARROW", "Single line with an open arrowheadDottttT");
832,method,,call,newArrowStyle,       public static final ArrowStyle SOLID_ARROW =        new ArrowStyle("SOLID_ARROW", "Single line with a filled arrowheadDottttT");
833,method,,call,newArrowStyle,       public static final ArrowStyle BROAD_ARROW        = new ArrowStyle("BROAD_ARROW",                         "Double line with large arrowheadDottttT");
834,method,,definition,ArrowStyle,                   protected ArrowStyle(String name, String description) {
835,method,,call,,loadIconResource,        super(VALUES, name, description, loadIconResource(ArrowStyleDottttTclass, name + "DottttTgif"));
837,method,,definition,values,                   public static ArrowStyle[] values() {
839,method,,call,VALUES.toArray,            return (ArrowStyle[]) VALUESDottttTtoArray(new ArrowStyle[VALUESDottttTsize()]);
839,method,,call,VALUES.size,            return (ArrowStyle[]) VALUESDottttTtoArray(new ArrowStyle[VALUESDottttTsize()]);
842,method,,definition,family,       public CodeList[] family() {
843,method,,call,values,        return values();
848,method,,call,newDashArray,                       public static final DashArray NONE = new DashArray("NONE", "No Dash Array", new float[0]);
850,method,,definition,DashArray,                   public DashArray(String name, String description, float[] pattern) {
854,method,,definition,getDashPattern,                   public float[] getDashPattern() {
868,method,,call,getEditabilityAutoEdit,                           public boolean getEditabilityAutoEdit();
869,method,,call,isEditabilityAutoEditSet,               public boolean isEditabilityAutoEditSet();
870,method,,call,setEditabilityAutoEdit,               public void setEditabilityAutoEdit(boolean autoEdit);
871,method,,call,setEditabilityAutoEditSet,               public void setEditabilityAutoEditSet(boolean flag);
872,method,,call,getEditabilityDragSelectable,          public boolean getEditabilityDragSelectable();
873,method,,call,isEditabilityDragSelectableSet,               public boolean isEditabilityDragSelectableSet();
874,method,,call,setEditabilityDragSelectable,               public void setEditabilityDragSelectable(boolean dragSelectable);
875,method,,call,setEditabilityDragSelectableSet,               public void setEditabilityDragSelectableSet(boolean flag);
876,method,,call,getEditabilityPickable,             public boolean getEditabilityPickable();
877,method,,call,isEditabilityPickableSet,               public boolean isEditabilityPickableSet();
878,method,,call,setEditabilityPickable,               public void setEditabilityPickable(boolean pickable);
879,method,,call,setEditabilityPickableSet,               public void setEditabilityPickableSet(boolean flag);
880,method,,call,getEditabilitySelected,          public boolean getEditabilitySelected();
881,method,,call,isEditabilitySelectedSet,               public boolean isEditabilitySelectedSet();
882,method,,call,setEditabilitySelected,               public void setEditabilitySelected(boolean selected);
883,method,,call,setEditabilitySelectedSet,               public void setEditabilitySelectedSet(boolean flag);
894,method,,call,getColor,           public Color getColor();
895,method,,call,isColorSet,               public boolean isColorSet();
896,method,,call,setColor,               public void setColor(Color fillColor);
897,method,,call,setColorSet,               public void setColorSet(boolean flag);
898,method,,call,getBackgroundColor,          public Color getBackgroundColor();
899,method,,call,isBackgroundColorSet,               public boolean isBackgroundColorSet();
900,method,,call,setBackgroundColor,               public void setBackgroundColor(Color fillBackgroundColor);
901,method,,call,setBackgroundColorSet,               public void setBackgroundColorSet(boolean flag);
902,method,,call,]getGradientPoints,           public float[] getGradientPoints();
903,method,,call,isGradientPointsSet,               public boolean isGradientPointsSet();
904,method,,call,setGradientPoints,               public void setGradientPoints(float[] fillGradientPoints);
905,method,,call,setGradientPointsSet,               public void setGradientPointsSet(boolean flag);
906,method,,call,getOpacity,          public float getOpacity();
907,method,,call,isOpacitySet,               public boolean isOpacitySet();
908,method,,call,setOpacity,               public void setOpacity(float fillOpacity);
909,method,,call,setOpacitySet,               public void setOpacitySet(boolean flag);
910,method,,call,getFillPattern,          public FillPattern getFillPattern();
911,method,,call,isFillPatternSet,               public boolean isFillPatternSet();
912,method,,call,setFillPattern,               public void setFillPattern(FillPattern fillPattern);
913,method,,call,setFillPatternSet,               public void setFillPatternSet(boolean flag);
914,method,,call,getFillStyle,          public FillStyle getFillStyle();
915,method,,call,isFillStyleSet,               public boolean isFillStyleSet();
916,method,,call,setFillStyle,               public void setFillStyle(FillStyle fillStyle);
917,method,,call,setFillStyleSet,               public void setFillStyleSet(boolean flag);
925,method,,call,newArrayList,                   private static final List VALUES = new ArrayList(11);
926,method,,call,newFillPattern,       public static final FillPattern NONE = new FillPattern("NONE", "No fillDottttT");
927,method,,call,newFillPattern,       public static final FillPattern DOTS =        new FillPattern("DOTS", "Regularly spaced single pixelsDottttT");
928,method,,call,newFillPattern,       public static final FillPattern VERTICAL_LINES =        new FillPattern("VERTICAL_LINES", "Parallel vertical linesDottttT");
929,method,,call,newFillPattern,       public static final FillPattern HORIZONTAL_LINES =        new FillPattern("HORIZONTAL_LINES", "Parallel horizontal linesDottttT");
930,method,,call,newFillPattern,       public static final FillPattern NEGATIVE_SLANTS =        new FillPattern(            "NEGATIVE_SLANTS",            "Parallel slanted lines running from upper left to lower rightDottttT");
931,method,,call,newFillPattern,       public static final FillPattern POSITIVE_SLANTS =        new FillPattern(            "POSITIVE_SLANTS",            "Parallel slanted lines running from lower left to upper rightDottttT");
932,method,,call,newFillPattern,       public static final FillPattern PLUSSES =        new FillPattern("PLUSSES", "Small closely spaced '+' marksDottttT");
933,method,,call,newFillPattern,       public static final FillPattern XHATCH =        new FillPattern("XHATCH", "Two series of intersecting parallel linesDottttT");
934,method,,call,newFillPattern,       public static final FillPattern FILL_25_PERCENT =        new FillPattern("FILL_25_PERCENT", "25% fillDottttT  Can be used to simulate transparencyDottttT");
935,method,,call,newFillPattern,       public static final FillPattern FILL_50_PERCENT =        new FillPattern("FILL_50_PERCENT", "50% fillDottttT  Can be used to simulate transparencyDottttT");
936,method,,call,newFillPattern,       public static final FillPattern FILL_75_PERCENT        = new FillPattern("FILL_75_PERCENT", "75% fillDottttT  Can be used to simulate transparencyDottttT");
937,method,,definition,FillPattern,                   protected FillPattern(String name, String description) {
938,method,,call,,loadIconResource,        super(VALUES, name, description, loadIconResource(FillPatternDottttTclass, name + "DottttTgif"));
940,method,,definition,values,                   public static FillPattern[] values() {
942,method,,call,VALUES.toArray,            return (FillPattern[]) VALUESDottttTtoArray(new FillPattern[VALUESDottttTsize()]);
942,method,,call,VALUES.size,            return (FillPattern[]) VALUESDottttTtoArray(new FillPattern[VALUESDottttTsize()]);
945,method,,definition,family,       public CodeList[] family() {
946,method,,call,values,        return values();
955,method,,call,newArrayList,                   private static final List VALUES = new ArrayList(5);
956,method,,call,newFillStyle,       public static final FillStyle SOLID = new FillStyle("SOLID", "Fill entirely with the colorDottttT");
957,method,,call,newFillStyle,       public static final FillStyle EMPTY = new FillStyle("EMPTY", "Do not fillDottttT");
958,method,,call,newFillStyle,       public static final FillStyle STIPPLED =        new FillStyle("STIPPLED", "Fill using a transparent, tiled patternDottttT");
959,method,,call,newFillStyle,       public static final FillStyle OPAQUE_STIPPLED =        new FillStyle("OPAQUE_STIPPLED", "Fill using an opaque, tiled patternDottttT");
960,method,,call,newFillStyle,       public static final FillStyle GRADIENT =            new FillStyle("GRADIENT",                    "Fill using a smooth transition between the current " +                    "foreground and background colorsDottttT");
961,method,,definition,FillStyle,                   protected FillStyle(String name, String description) {
964,method,,definition,values,       public static FillStyle[] values() {
966,method,,call,VALUES.toArray,            return (FillStyle[]) VALUESDottttTtoArray(new FillStyle[VALUESDottttTsize()]);
966,method,,call,VALUES.size,            return (FillStyle[]) VALUESDottttTtoArray(new FillStyle[VALUESDottttTsize()]);
969,method,,definition,family,       public CodeList[] family() {
970,method,,call,values,        return values();
988,method,,call,getGraphic,                                                  public Graphic getGraphic();
989,method,,call,getImplHint,           public Object getImplHint(String hintName);
990,method,,call,setImplHint,           public void setImplHint(String hintname, Object hint);
991,method,,call,setPropertiesFrom,           public void setPropertiesFrom(GraphicStyle style);
992,method,,call,getEditability,                   public Editability getEditability();
993,method,,call,setEditability,           public void setEditability(Editability object);
994,method,,call,getHighlight,           public Highlight getHighlight();
995,method,,call,setHighlight,           public void setHighlight(Highlight object);
996,method,,call,getSymbology,           public Symbology getSymbology();
997,method,,call,setSymbology,           public void setSymbology(Symbology object);
998,method,,call,getViewability,           public Viewability getViewability();
999,method,,call,setViewability,           public void setViewability(Viewability object);
1000,method,,call,getLineSymbolizer,               public LineSymbolizer getLineSymbolizer();
1001,method,,call,setLineSymbolizer,       public void setLineSymbolizer(LineSymbolizer object);
1002,method,,call,getPointSymbolizer,           public PointSymbolizer getPointSymbolizer();
1003,method,,call,setPointSymbolizer,       public void setPointSymbolizer(PointSymbolizer object);
1004,method,,call,getPolygonSymbolizer,       public PolygonSymbolizer getPolygonSymbolizer();
1005,method,,call,setPolygonSymbolizer,       public void setPolygonSymbolizer(PolygonSymbolizer object);
1006,method,,call,getTextSymbolizer,       public TextSymbolizer getTextSymbolizer();
1007,method,,call,setTextSymbolizer,       public void setTextSymbolizer(TextSymbolizer object);
1008,method,,call,isInheritingStyleFromParent,               public boolean isInheritingStyleFromParent();
1009,method,,call,setInheritingStyleFromParent,               public void setInheritingStyleFromParent(boolean inheritStyleFromParent);
1010,method,,call,isOverridingAggregatedGraphics,           public boolean isOverridingAggregatedGraphics();
1011,method,,call,setOverridingAggregatedGraphics,               public void setOverridingAggregatedGraphics(boolean overrideAggregatedGraphics);
1016,method,,call,getRadius,       public float getRadius();
1017,method,,call,isRadiusSet,           public boolean isRadiusSet();
1018,method,,call,setRadius,           public void setRadius(float haloRadius);
1019,method,,call,setRadiusSet,           public void setRadiusSet(boolean flag);
1029,method,,call,getHighlightBlinking,                           public boolean getHighlightBlinking();
1030,method,,call,isHighlightBlinkingSet,               public boolean isHighlightBlinkingSet();
1031,method,,call,setHighlightBlinking,               public void setHighlightBlinking(boolean blinking);
1032,method,,call,setHighlightBlinkingSet,               public void setHighlightBlinkingSet(boolean flag);
1033,method,,call,]getHighlightBlinkPattern,          public float[] getHighlightBlinkPattern();
1034,method,,call,isHighlightBlinkPatternSet,               public boolean isHighlightBlinkPatternSet();
1035,method,,call,setHighlightBlinkPattern,               public void setHighlightBlinkPattern(float[] blinkPattern);
1036,method,,call,setHighlightBlinkPatternSet,               public void setHighlightBlinkPatternSet(boolean flag);
1044,method,,call,isInheritingStyleFromParent,                   public boolean isInheritingStyleFromParent();
1045,method,,call,isInheritingStyleFromParentSet,               public boolean isInheritingStyleFromParentSet();
1046,method,,call,setInheritingStyleFromParent,               public void setInheritingStyleFromParent(boolean inheritStyleFromParent);
1047,method,,call,setInheritingStyleFromParentSet,               public void setInheritingStyleFromParentSet(boolean flag);
1048,method,,call,isOverridingAggregatedGraphics,        public boolean isOverridingAggregatedGraphics();
1049,method,,call,isOverridingAggregatedGraphicsSet,               public boolean isOverridingAggregatedGraphicsSet();
1050,method,,call,setOverridingAggregatedGraphics,               public void setOverridingAggregatedGraphics(boolean overrideAggregatedGraphics);
1051,method,,call,setOverridingAggregatedGraphicsSet,               public void setOverridingAggregatedGraphicsSet(boolean flag);
1062,method,,call,getLabel,       public String getLabel();
1063,method,,call,isLabelSet,               public boolean isLabelSet();
1064,method,,call,setLabel,               public void setLabel(String label);
1065,method,,call,setLabelSet,               public void setLabelSet(boolean flag);
1066,method,,call,getRotation,           public float getRotation();
1067,method,,call,isRotationSet,               public boolean isRotationSet();
1068,method,,call,setRotation,               public void setRotation(float labelRotation);
1069,method,,call,setRotationSet,               public void setRotationSet(boolean flag);
1070,method,,call,getXAnchor,          public XAnchor getXAnchor();
1071,method,,call,isXAnchorSet,               public boolean isXAnchorSet();
1072,method,,call,setXAnchor,               public void setXAnchor(XAnchor labelXAnchor);
1073,method,,call,setXAnchorSet,               public void setXAnchorSet(boolean flag);
1074,method,,call,getXDisplacement,          public float getXDisplacement();
1075,method,,call,isXDisplacementSet,               public boolean isXDisplacementSet();
1076,method,,call,setXDisplacement,               public void setXDisplacement(float labelXDisplacement);
1077,method,,call,setXDisplacementSet,               public void setXDisplacementSet(boolean flag);
1078,method,,call,getYAnchor,          public YAnchor getYAnchor();
1079,method,,call,isYAnchorSet,               public boolean isYAnchorSet();
1080,method,,call,setYAnchor,               public void setYAnchor(YAnchor labelYAnchor);
1081,method,,call,setYAnchorSet,               public void setYAnchorSet(boolean flag);
1082,method,,call,getYDisplacement,          public float getYDisplacement();
1083,method,,call,isYDisplacementSet,               public boolean isYDisplacementSet();
1084,method,,call,setYDisplacement,               public void setYDisplacement(float labelYDisplacement);
1085,method,,call,setYDisplacementSet,               public void setYDisplacementSet(boolean flag);
1086,method,,call,getShowLabel,          public boolean getShowLabel();
1087,method,,call,isShowLabelSet,               public boolean isShowLabelSet();
1088,method,,call,setShowLabel,               public void setShowLabel(boolean showLabel);
1089,method,,call,setShowLabelSet,               public void setShowLabelSet(boolean flag);
1097,method,,call,newArrayList,                   private static final List VALUES = new ArrayList(3);
1098,method,,call,newLineCap,       public static final LineCap BUTT = new LineCap("BUTT", "Draw line ends with no decorationDottttT");
1099,method,,call,newLineCap,       public static final LineCap ROUND = new LineCap("ROUND", "Draw line ends with half circlesDottttT");
1100,method,,call,newLineCap,       public static final LineCap SQUARE =            new LineCap("SQUARE", "Draw line ends with a square capDottttT");
1101,method,,definition,LineCap,                   protected LineCap(String name, String description) {
1104,method,,definition,values,                   public static LineCap[] values() {
1106,method,,call,VALUES.toArray,            return (LineCap[]) VALUESDottttTtoArray(new LineCap[VALUESDottttTsize()]);
1106,method,,call,VALUES.size,            return (LineCap[]) VALUESDottttTtoArray(new LineCap[VALUESDottttTsize()]);
1109,method,,definition,family,       public CodeList[] family() {
1110,method,,call,values,        return values();
1119,method,,call,newArrayList,                       private static final List VALUES = new ArrayList(3);
1120,method,,call,newLineJoin,           public static final LineJoin MITER =        new LineJoin("MITER", "Join lines by extending outside edges until they meetDottttT");
1121,method,,call,newLineJoin,               public static final LineJoin ROUND =        new LineJoin("ROUND", "Join lines with a circular arc equal to hald the line widthDottttT");
1122,method,,call,newLineJoin,               public static final LineJoin BEVEL =            new LineJoin("BEVEL",                    "Joine lines by connecting outer corners with a segmentDottttT");
1123,method,,definition,LineJoin,                           protected LineJoin(String name, String description) {
1126,method,,definition,values,                           public static LineJoin[] values() {
1128,method,,call,VALUES.toArray,            return (LineJoin[]) VALUESDottttTtoArray(new LineJoin[VALUESDottttTsize()]);
1128,method,,call,VALUES.size,            return (LineJoin[]) VALUESDottttTtoArray(new LineJoin[VALUESDottttTsize()]);
1131,method,,definition,family,       public CodeList[] family() {
1132,method,,call,values,        return values();
1141,method,,call,newArrayList,                       private static final List VALUES = new ArrayList(6);
1142,method,,call,newLinePattern,           public static final LinePattern NONE = new LinePattern("NONE", "A line with no patternDottttT");
1143,method,,call,newLinePattern,           public static final LinePattern DASHED = new LinePattern("DASHED", "A dashed line");
1144,method,,call,newLinePattern,           public static final LinePattern DOTTED = new LinePattern("DOTTED", "A dotted line");
1145,method,,call,newLinePattern,           public static final LinePattern DOT_DASHED = new LinePattern("DOT_DASHED", "Dot dashed line");
1146,method,,call,newLinePattern,           public static final LinePattern LONG_DASHED =        new LinePattern("LONG_DASHED", "Long dashed line");
1147,method,,call,newLinePattern,               public static final LinePattern LONG_DOT_DASHED            = new LinePattern("LONG_DOT_DASHED", "Long dot dashed line");
1148,method,,definition,LinePattern,                        protected LinePattern(String name, String description) {
1149,method,,call,,loadIconResource,        super(VALUES, name, description, loadIconResource(LinePatternDottttTclass, name + "DottttTgif"));
1151,method,,definition,values,       public static LinePattern[] values() {
1153,method,,call,VALUES.toArray,            return (LinePattern[]) VALUESDottttTtoArray(new LinePattern[VALUESDottttTsize()]);
1153,method,,call,VALUES.size,            return (LinePattern[]) VALUESDottttTtoArray(new LinePattern[VALUESDottttTsize()]);
1156,method,,definition,family,       public CodeList[] family() {
1157,method,,call,values,        return values();
1166,method,,call,newArrayList,                       private static final List VALUES = new ArrayList(2);
1167,method,,call,newLineStyle,           public static final LineStyle SINGLE = new LineStyle("SINGLE", "Single Line");
1168,method,,call,newLineStyle,           public static final LineStyle DOUBLE        = new LineStyle("DOUBLE", "Double Line");
1169,method,,definition,LineStyle,                           protected LineStyle(String name, String description) {
1170,method,,call,,loadIconResource,        super(VALUES, name, description, loadIconResource(LineStyleDottttTclass, name + "DottttTgif"));
1172,method,,definition,values,                   public static LineStyle[] values() {
1174,method,,call,VALUES.toArray,            return (LineStyle[]) VALUESDottttTtoArray(new LineStyle[VALUESDottttTsize()]);
1174,method,,call,VALUES.size,            return (LineStyle[]) VALUESDottttTtoArray(new LineStyle[VALUESDottttTsize()]);
1177,method,,definition,family,       public CodeList[] family() {
1178,method,,call,values,        return values();
1220,method,,call,getLineStrokeBeginArrowStyle,                   public ArrowStyle getLineStrokeBeginArrowStyle();
1221,method,,call,isLineStrokeBeginArrowStyleSet,               public boolean isLineStrokeBeginArrowStyleSet();
1222,method,,call,setLineStrokeBeginArrowStyle,               public void setLineStrokeBeginArrowStyle(ArrowStyle strokeArrowStyle);
1223,method,,call,setLineStrokeBeginArrowStyleSet,               public void setLineStrokeBeginArrowStyleSet(boolean flag);
1224,method,,call,getLineStrokeEndArrowStyle,           public ArrowStyle getLineStrokeEndArrowStyle();
1225,method,,call,isLineStrokeEndArrowStyleSet,               public boolean isLineStrokeEndArrowStyleSet();
1226,method,,call,setLineStrokeEndArrowStyle,               public void setLineStrokeEndArrowStyle(ArrowStyle strokeArrowStyle);
1227,method,,call,setLineStrokeEndArrowStyleSet,               public void setLineStrokeEndArrowStyleSet(boolean flag);
1228,method,,call,getLineStrokeColor,             public Color getLineStrokeColor();
1229,method,,call,isLineStrokeColorSet,               public boolean isLineStrokeColorSet();
1230,method,,call,setLineStrokeColor,               public void setLineStrokeColor(Color strokeColor);
1231,method,,call,setLineStrokeColorSet,               public void setLineStrokeColorSet(boolean flag);
1232,method,,call,getLineStrokeDashArray,          public DashArray getLineStrokeDashArray();
1233,method,,call,isLineStrokeDashArraySet,               public boolean isLineStrokeDashArraySet();
1234,method,,call,setLineStrokeDashArray,               public void setLineStrokeDashArray(DashArray strokeDashArray);
1235,method,,call,setLineStrokeDashArraySet,               public void setLineStrokeDashArraySet(boolean flag);
1236,method,,call,getLineStrokeDashOffset,          public float getLineStrokeDashOffset();
1237,method,,call,isLineStrokeDashOffsetSet,               public boolean isLineStrokeDashOffsetSet();
1238,method,,call,setLineStrokeDashOffset,               public void setLineStrokeDashOffset(float strokeDashOffset);
1239,method,,call,setLineStrokeDashOffsetSet,               public void setLineStrokeDashOffsetSet(boolean flag);
1240,method,,call,getLineStrokeFillColor,          public Color getLineStrokeFillColor();
1241,method,,call,isLineStrokeFillColorSet,           public boolean isLineStrokeFillColorSet();
1242,method,,call,setLineStrokeFillColor,           public void setLineStrokeFillColor(Color fillColor);
1243,method,,call,setLineStrokeFillColorSet,           public void setLineStrokeFillColorSet(boolean flag);
1244,method,,call,getLineStrokeFillBackgroundColor,          public Color getLineStrokeFillBackgroundColor();
1245,method,,call,isLineStrokeFillBackgroundColorSet,           public boolean isLineStrokeFillBackgroundColorSet();
1246,method,,call,setLineStrokeFillBackgroundColor,           public void setLineStrokeFillBackgroundColor(Color fillBackgroundColor);
1247,method,,call,setLineStrokeFillBackgroundColorSet,           public void setLineStrokeFillBackgroundColorSet(boolean flag);
1248,method,,call,]getLineStrokeFillGradientPoints,       public float[] getLineStrokeFillGradientPoints();
1249,method,,call,isLineStrokeFillGradientPointsSet,           public boolean isLineStrokeFillGradientPointsSet();
1250,method,,call,setLineStrokeFillGradientPoints,           public void setLineStrokeFillGradientPoints(float[] fillGradientPoints);
1251,method,,call,setLineStrokeFillGradientPointsSet,           public void setLineStrokeFillGradientPointsSet(boolean flag);
1252,method,,call,getLineStrokeFillOpacity,          public float getLineStrokeFillOpacity();
1253,method,,call,isLineStrokeFillOpacitySet,           public boolean isLineStrokeFillOpacitySet();
1254,method,,call,setLineStrokeFillOpacity,           public void setLineStrokeFillOpacity(float fillOpacity);
1255,method,,call,setLineStrokeFillOpacitySet,           public void setLineStrokeFillOpacitySet(boolean flag);
1256,method,,call,getLineStrokeFillPattern,          public FillPattern getLineStrokeFillPattern();
1257,method,,call,isLineStrokeFillPatternSet,           public boolean isLineStrokeFillPatternSet();
1258,method,,call,setLineStrokeFillPattern,           public void setLineStrokeFillPattern(FillPattern fillPattern);
1259,method,,call,setLineStrokeFillPatternSet,           public void setLineStrokeFillPatternSet(boolean flag);
1260,method,,call,getLineStrokeFillStyle,          public FillStyle getLineStrokeFillStyle();
1261,method,,call,isLineStrokeFillStyleSet,           public boolean isLineStrokeFillStyleSet();
1262,method,,call,setLineStrokeFillStyle,           public void setLineStrokeFillStyle(FillStyle fillStyle);
1263,method,,call,setLineStrokeFillStyleSet,           public void setLineStrokeFillStyleSet(boolean flag);
1264,method,,call,getLineStrokeLineCap,             public LineCap getLineStrokeLineCap();
1265,method,,call,isLineStrokeLineCapSet,               public boolean isLineStrokeLineCapSet();
1266,method,,call,setLineStrokeLineCap,               public void setLineStrokeLineCap(LineCap strokeLineCap);
1267,method,,call,setLineStrokeLineCapSet,               public void setLineStrokeLineCapSet(boolean flag);
1268,method,,call,getLineStrokeLineGap,          public float getLineStrokeLineGap();
1269,method,,call,isLineStrokeLineGapSet,               public boolean isLineStrokeLineGapSet();
1270,method,,call,setLineStrokeLineGap,               public void setLineStrokeLineGap(float strokeLineGap);
1271,method,,call,setLineStrokeLineGapSet,               public void setLineStrokeLineGapSet(boolean flag);
1272,method,,call,getLineStrokeLineJoin,            public LineJoin getLineStrokeLineJoin();
1273,method,,call,isLineStrokeLineJoinSet,               public boolean isLineStrokeLineJoinSet();
1274,method,,call,setLineStrokeLineJoin,               public void setLineStrokeLineJoin(LineJoin strokeLineJoin);
1275,method,,call,setLineStrokeLineJoinSet,               public void setLineStrokeLineJoinSet(boolean flag);
1276,method,,call,getLineStrokeLinePattern,            public LinePattern getLineStrokeLinePattern();
1277,method,,call,isLineStrokeLinePatternSet,               public boolean isLineStrokeLinePatternSet();
1278,method,,call,setLineStrokeLinePattern,               public void setLineStrokeLinePattern(LinePattern strokeLinePattern);
1279,method,,call,setLineStrokeLinePatternSet,               public void setLineStrokeLinePatternSet(boolean flag);
1280,method,,call,getLineStrokeLineStyle,            public LineStyle getLineStrokeLineStyle();
1281,method,,call,isLineStrokeLineStyleSet,               public boolean isLineStrokeLineStyleSet();
1282,method,,call,setLineStrokeLineStyle,               public void setLineStrokeLineStyle(LineStyle strokeLineStyle);
1283,method,,call,setLineStrokeLineStyleSet,               public void setLineStrokeLineStyleSet(boolean flag);
1284,method,,call,getLineStrokeOpacity,            public float getLineStrokeOpacity();
1285,method,,call,isLineStrokeOpacitySet,               public boolean isLineStrokeOpacitySet();
1286,method,,call,setLineStrokeOpacity,               public void setLineStrokeOpacity(float opacity);
1287,method,,call,setLineStrokeOpacitySet,               public void setLineStrokeOpacitySet(boolean flag);
1288,method,,call,getLineStrokeWidth,          public float getLineStrokeWidth();
1289,method,,call,isLineStrokeWidthSet,               public boolean isLineStrokeWidthSet();
1290,method,,call,setLineStrokeWidth,               public void setLineStrokeWidth(float width);
1291,method,,call,setLineStrokeWidthSet,               public void setLineStrokeWidthSet(boolean flag);
1299,method,,call,newArrayList,                   private static final List VALUES = new ArrayList(7);
1300,method,,call,newMark,       public static final Mark CUSTOM =        new Mark("CUSTOM", "Symbolize with a custom markDottttT");
1301,method,,call,newMark,       public static final Mark CIRCLE =        new Mark("CIRCLE", "Symbolize with a circle markDottttT");
1302,method,,call,newMark,       public static final Mark CROSS =        new Mark("CROSS", "Symbolize with a cross markDottttT");
1303,method,,call,newMark,       public static final Mark SQUARE =        new Mark("SQUARE", "Symbolize with a square markDottttT");
1304,method,,call,newMark,       public static final Mark STAR =        new Mark("STAR", "Symbolize with a star markDottttT");
1305,method,,call,newMark,       public static final Mark TRIANGLE =        new Mark("TRIANGLE", "Symbolize with a triangle markDottttT");
1306,method,,call,newMark,       public static final Mark X =            new Mark("X", "Symbolize with an X markDottttT");
1307,method,,definition,Mark,                   protected Mark(String name, String description) {
1310,method,,definition,values,                           public static Mark[] values() {
1312,method,,call,VALUES.toArray,            return (Mark[]) VALUESDottttTtoArray(new Mark[VALUESDottttTsize()]);
1312,method,,call,VALUES.size,            return (Mark[]) VALUESDottttTtoArray(new Mark[VALUESDottttTsize()]);
1315,method,,definition,family,       public CodeList[] family() {
1316,method,,call,values,        return  values();
1379,method,,call,getPointFillColor,                           public Color getPointFillColor();
1380,method,,call,isPointFillColorSet,           public boolean isPointFillColorSet();
1381,method,,call,setPointFillColor,           public void setPointFillColor(Color fillColor);
1382,method,,call,setPointFillColorSet,           public void setPointFillColorSet(boolean flag);
1383,method,,call,getPointFillBackgroundColor,          public Color getPointFillBackgroundColor();
1384,method,,call,isPointFillBackgroundColorSet,           public boolean isPointFillBackgroundColorSet();
1385,method,,call,setPointFillBackgroundColor,           public void setPointFillBackgroundColor(Color fillBackgroundColor);
1386,method,,call,setPointFillBackgroundColorSet,           public void setPointFillBackgroundColorSet(boolean flag);
1387,method,,call,]getPointFillGradientPoints,       public float[] getPointFillGradientPoints();
1388,method,,call,isPointFillGradientPointsSet,           public boolean isPointFillGradientPointsSet();
1389,method,,call,setPointFillGradientPoints,           public void setPointFillGradientPoints(float[] fillGradientPoints);
1390,method,,call,setPointFillGradientPointsSet,           public void setPointFillGradientPointsSet(boolean flag);
1391,method,,call,getPointFillOpacity,          public float getPointFillOpacity();
1392,method,,call,isPointFillOpacitySet,           public boolean isPointFillOpacitySet();
1393,method,,call,setPointFillOpacity,           public void setPointFillOpacity(float fillOpacity);
1394,method,,call,setPointFillOpacitySet,           public void setPointFillOpacitySet(boolean flag);
1395,method,,call,getPointFillPattern,          public FillPattern getPointFillPattern();
1396,method,,call,isPointFillPatternSet,           public boolean isPointFillPatternSet();
1397,method,,call,setPointFillPattern,           public void setPointFillPattern(FillPattern fillPattern);
1398,method,,call,setPointFillPatternSet,           public void setPointFillPatternSet(boolean flag);
1399,method,,call,getPointFillStyle,          public FillStyle getPointFillStyle();
1400,method,,call,isPointFillStyleSet,           public boolean isPointFillStyleSet();
1401,method,,call,setPointFillStyle,           public void setPointFillStyle(FillStyle fillStyle);
1402,method,,call,setPointFillStyleSet,           public void setPointFillStyleSet(boolean flag);
1403,method,,call,getPointMark,               public Mark getPointMark();
1404,method,,call,isPointMarkSet,               public boolean isPointMarkSet();
1405,method,,call,setPointMark,               public void setPointMark(Mark pointMark);
1406,method,,call,setPointMarkSet,               public void setPointMarkSet(boolean flag);
1407,method,,call,getPointOpacity,           public float getPointOpacity();
1408,method,,call,isPointOpacitySet,               public boolean isPointOpacitySet();
1409,method,,call,setPointOpacity,               public void setPointOpacity(float pointOpacity);
1410,method,,call,setPointOpacitySet,               public void setPointOpacitySet(boolean flag);
1411,method,,call,getPointRotation,          public float getPointRotation();
1412,method,,call,isPointRotationSet,               public boolean isPointRotationSet();
1413,method,,call,setPointRotation,               public void setPointRotation(float pointRotation);
1414,method,,call,setPointRotationSet,               public void setPointRotationSet(boolean flag);
1415,method,,call,getPointSize,          public float getPointSize();
1416,method,,call,isPointSizeSet,               public boolean isPointSizeSet();
1417,method,,call,setPointSize,               public void setPointSize(float pointSize);
1418,method,,call,setPointSizeSet,               public void setPointSizeSet(boolean flag);
1419,method,,call,getPointStrokeBeginArrowStyle,          public ArrowStyle getPointStrokeBeginArrowStyle();
1420,method,,call,isPointStrokeBeginArrowStyleSet,               public boolean isPointStrokeBeginArrowStyleSet();
1421,method,,call,setPointStrokeBeginArrowStyle,               public void setPointStrokeBeginArrowStyle(ArrowStyle strokeArrowStyle);
1422,method,,call,setPointStrokeBeginArrowStyleSet,               public void setPointStrokeBeginArrowStyleSet(boolean flag);
1423,method,,call,getPointStrokeEndArrowStyle,           public ArrowStyle getPointStrokeEndArrowStyle();
1424,method,,call,isPointStrokeEndArrowStyleSet,               public boolean isPointStrokeEndArrowStyleSet();
1425,method,,call,setPointStrokeEndArrowStyle,               public void setPointStrokeEndArrowStyle(ArrowStyle strokeArrowStyle);
1426,method,,call,setPointStrokeEndArrowStyleSet,               public void setPointStrokeEndArrowStyleSet(boolean flag);
1427,method,,call,getPointStrokeColor,             public Color getPointStrokeColor();
1428,method,,call,isPointStrokeColorSet,               public boolean isPointStrokeColorSet();
1429,method,,call,setPointStrokeColor,               public void setPointStrokeColor(Color strokeColor);
1430,method,,call,setPointStrokeColorSet,               public void setPointStrokeColorSet(boolean flag);
1431,method,,call,getPointStrokeDashArray,          public DashArray getPointStrokeDashArray();
1432,method,,call,isPointStrokeDashArraySet,               public boolean isPointStrokeDashArraySet();
1433,method,,call,setPointStrokeDashArray,               public void setPointStrokeDashArray(DashArray strokeDashArray);
1434,method,,call,setPointStrokeDashArraySet,               public void setPointStrokeDashArraySet(boolean flag);
1435,method,,call,getPointStrokeDashOffset,          public float getPointStrokeDashOffset();
1436,method,,call,isPointStrokeDashOffsetSet,               public boolean isPointStrokeDashOffsetSet();
1437,method,,call,setPointStrokeDashOffset,               public void setPointStrokeDashOffset(float strokeDashOffset);
1438,method,,call,setPointStrokeDashOffsetSet,               public void setPointStrokeDashOffsetSet(boolean flag);
1439,method,,call,getPointStrokeFillColor,          public Color getPointStrokeFillColor();
1440,method,,call,isPointStrokeFillColorSet,           public boolean isPointStrokeFillColorSet();
1441,method,,call,setPointStrokeFillColor,           public void setPointStrokeFillColor(Color fillColor);
1442,method,,call,setPointStrokeFillColorSet,           public void setPointStrokeFillColorSet(boolean flag);
1443,method,,call,getPointStrokeFillBackgroundColor,          public Color getPointStrokeFillBackgroundColor();
1444,method,,call,isPointStrokeFillBackgroundColorSet,           public boolean isPointStrokeFillBackgroundColorSet();
1445,method,,call,setPointStrokeFillBackgroundColor,           public void setPointStrokeFillBackgroundColor(Color fillBackgroundColor);
1446,method,,call,setPointStrokeFillBackgroundColorSet,           public void setPointStrokeFillBackgroundColorSet(boolean flag);
1447,method,,call,]getPointStrokeFillGradientPoints,       public float[] getPointStrokeFillGradientPoints();
1448,method,,call,isPointStrokeFillGradientPointsSet,           public boolean isPointStrokeFillGradientPointsSet();
1449,method,,call,setPointStrokeFillGradientPoints,           public void setPointStrokeFillGradientPoints(float[] fillGradientPoints);
1450,method,,call,setPointStrokeFillGradientPointsSet,           public void setPointStrokeFillGradientPointsSet(boolean flag);
1451,method,,call,getPointStrokeFillOpacity,          public float getPointStrokeFillOpacity();
1452,method,,call,isPointStrokeFillOpacitySet,           public boolean isPointStrokeFillOpacitySet();
1453,method,,call,setPointStrokeFillOpacity,           public void setPointStrokeFillOpacity(float fillOpacity);
1454,method,,call,setPointStrokeFillOpacitySet,           public void setPointStrokeFillOpacitySet(boolean flag);
1455,method,,call,getPointStrokeFillPattern,          public FillPattern getPointStrokeFillPattern();
1456,method,,call,isPointStrokeFillPatternSet,           public boolean isPointStrokeFillPatternSet();
1457,method,,call,setPointStrokeFillPattern,           public void setPointStrokeFillPattern(FillPattern fillPattern);
1458,method,,call,setPointStrokeFillPatternSet,           public void setPointStrokeFillPatternSet(boolean flag);
1459,method,,call,getPointStrokeFillStyle,          public FillStyle getPointStrokeFillStyle();
1460,method,,call,isPointStrokeFillStyleSet,           public boolean isPointStrokeFillStyleSet();
1461,method,,call,setPointStrokeFillStyle,           public void setPointStrokeFillStyle(FillStyle fillStyle);
1462,method,,call,setPointStrokeFillStyleSet,           public void setPointStrokeFillStyleSet(boolean flag);
1463,method,,call,getPointStrokeLineCap,             public LineCap getPointStrokeLineCap();
1464,method,,call,isPointStrokeLineCapSet,               public boolean isPointStrokeLineCapSet();
1465,method,,call,setPointStrokeLineCap,               public void setPointStrokeLineCap(LineCap strokeLineCap);
1466,method,,call,setPointStrokeLineCapSet,               public void setPointStrokeLineCapSet(boolean flag);
1467,method,,call,getPointStrokeLineGap,          public float getPointStrokeLineGap();
1468,method,,call,isPointStrokeLineGapSet,               public boolean isPointStrokeLineGapSet();
1469,method,,call,setPointStrokeLineGap,               public void setPointStrokeLineGap(float strokeLineGap);
1470,method,,call,setPointStrokeLineGapSet,               public void setPointStrokeLineGapSet(boolean flag);
1471,method,,call,getPointStrokeLineJoin,            public LineJoin getPointStrokeLineJoin();
1472,method,,call,isPointStrokeLineJoinSet,               public boolean isPointStrokeLineJoinSet();
1473,method,,call,setPointStrokeLineJoin,               public void setPointStrokeLineJoin(LineJoin strokeLineJoin);
1474,method,,call,setPointStrokeLineJoinSet,               public void setPointStrokeLineJoinSet(boolean flag);
1475,method,,call,getPointStrokeLinePattern,           public LinePattern getPointStrokeLinePattern();
1476,method,,call,isPointStrokeLinePatternSet,           public boolean isPointStrokeLinePatternSet();
1477,method,,call,setPointStrokeLinePattern,           public void setPointStrokeLinePattern(LinePattern strokeLinePattern);
1478,method,,call,setPointStrokeLinePatternSet,           public void setPointStrokeLinePatternSet(boolean flag);
1479,method,,call,getPointStrokeLineStyle,             public LineStyle getPointStrokeLineStyle();
1480,method,,call,isPointStrokeLineStyleSet,               public boolean isPointStrokeLineStyleSet();
1481,method,,call,setPointStrokeLineStyle,               public void setPointStrokeLineStyle(LineStyle strokeLineStyle);
1482,method,,call,setPointStrokeLineStyleSet,               public void setPointStrokeLineStyleSet(boolean flag);
1483,method,,call,getPointStrokeOpacity,            public float getPointStrokeOpacity();
1484,method,,call,isPointStrokeOpacitySet,               public boolean isPointStrokeOpacitySet();
1485,method,,call,setPointStrokeOpacity,               public void setPointStrokeOpacity(float opacity);
1486,method,,call,setPointStrokeOpacitySet,               public void setPointStrokeOpacitySet(boolean flag);
1487,method,,call,getPointStrokeWidth,          public float getPointStrokeWidth();
1488,method,,call,isPointStrokeWidthSet,               public boolean isPointStrokeWidthSet();
1489,method,,call,setPointStrokeWidth,               public void setPointStrokeWidth(float width);
1490,method,,call,setPointStrokeWidthSet,               public void setPointStrokeWidthSet(boolean flag);
1544,method,,call,getPolygonFillColor,                               public Color getPolygonFillColor();
1545,method,,call,isPolygonFillColorSet,           public boolean isPolygonFillColorSet();
1546,method,,call,setPolygonFillColor,           public void setPolygonFillColor(Color fillColor);
1547,method,,call,setPolygonFillColorSet,           public void setPolygonFillColorSet(boolean flag);
1548,method,,call,getPolygonFillBackgroundColor,          public Color getPolygonFillBackgroundColor();
1549,method,,call,isPolygonFillBackgroundColorSet,           public boolean isPolygonFillBackgroundColorSet();
1550,method,,call,setPolygonFillBackgroundColor,           public void setPolygonFillBackgroundColor(Color fillBackgroundColor);
1551,method,,call,setPolygonFillBackgroundColorSet,           public void setPolygonFillBackgroundColorSet(boolean flag);
1552,method,,call,]getPolygonFillGradientPoints,       public float[] getPolygonFillGradientPoints();
1553,method,,call,isPolygonFillGradientPointsSet,           public boolean isPolygonFillGradientPointsSet();
1554,method,,call,setPolygonFillGradientPoints,           public void setPolygonFillGradientPoints(float[] fillGradientPoints);
1555,method,,call,setPolygonFillGradientPointsSet,           public void setPolygonFillGradientPointsSet(boolean flag);
1556,method,,call,getPolygonFillOpacity,          public float getPolygonFillOpacity();
1557,method,,call,isPolygonFillOpacitySet,           public boolean isPolygonFillOpacitySet();
1558,method,,call,setPolygonFillOpacity,           public void setPolygonFillOpacity(float fillOpacity);
1559,method,,call,setPolygonFillOpacitySet,           public void setPolygonFillOpacitySet(boolean flag);
1560,method,,call,getPolygonFillPattern,          public FillPattern getPolygonFillPattern();
1561,method,,call,isPolygonFillPatternSet,           public boolean isPolygonFillPatternSet();
1562,method,,call,setPolygonFillPattern,           public void setPolygonFillPattern(FillPattern fillPattern);
1563,method,,call,setPolygonFillPatternSet,           public void setPolygonFillPatternSet(boolean flag);
1564,method,,call,getPolygonFillStyle,          public FillStyle getPolygonFillStyle();
1565,method,,call,isPolygonFillStyleSet,           public boolean isPolygonFillStyleSet();
1566,method,,call,setPolygonFillStyle,           public void setPolygonFillStyle(FillStyle fillStyle);
1567,method,,call,setPolygonFillStyleSet,           public void setPolygonFillStyleSet(boolean flag);
1568,method,,call,getPolygonStrokeBeginArrowStyle,           public ArrowStyle getPolygonStrokeBeginArrowStyle();
1569,method,,call,isPolygonStrokeBeginArrowStyleSet,               public boolean isPolygonStrokeBeginArrowStyleSet();
1570,method,,call,setPolygonStrokeBeginArrowStyle,               public void setPolygonStrokeBeginArrowStyle(ArrowStyle strokeArrowStyle);
1571,method,,call,setPolygonStrokeBeginArrowStyleSet,               public void setPolygonStrokeBeginArrowStyleSet(boolean flag);
1572,method,,call,getPolygonStrokeEndArrowStyle,           public ArrowStyle getPolygonStrokeEndArrowStyle();
1573,method,,call,isPolygonStrokeEndArrowStyleSet,               public boolean isPolygonStrokeEndArrowStyleSet();
1574,method,,call,setPolygonStrokeEndArrowStyle,               public void setPolygonStrokeEndArrowStyle(ArrowStyle strokeArrowStyle);
1575,method,,call,setPolygonStrokeEndArrowStyleSet,               public void setPolygonStrokeEndArrowStyleSet(boolean flag);
1576,method,,call,getPolygonStrokeColor,             public Color getPolygonStrokeColor();
1577,method,,call,isPolygonStrokeColorSet,               public boolean isPolygonStrokeColorSet();
1578,method,,call,setPolygonStrokeColor,               public void setPolygonStrokeColor(Color strokeColor);
1579,method,,call,setPolygonStrokeColorSet,               public void setPolygonStrokeColorSet(boolean flag);
1580,method,,call,getPolygonStrokeDashArray,          public DashArray getPolygonStrokeDashArray();
1581,method,,call,isPolygonStrokeDashArraySet,               public boolean isPolygonStrokeDashArraySet();
1582,method,,call,setPolygonStrokeDashArray,               public void setPolygonStrokeDashArray(DashArray strokeDashArray);
1583,method,,call,setPolygonStrokeDashArraySet,               public void setPolygonStrokeDashArraySet(boolean flag);
1584,method,,call,getPolygonStrokeDashOffset,          public float getPolygonStrokeDashOffset();
1585,method,,call,isPolygonStrokeDashOffsetSet,               public boolean isPolygonStrokeDashOffsetSet();
1586,method,,call,setPolygonStrokeDashOffset,               public void setPolygonStrokeDashOffset(float strokeDashOffset);
1587,method,,call,setPolygonStrokeDashOffsetSet,               public void setPolygonStrokeDashOffsetSet(boolean flag);
1588,method,,call,getPolygonStrokeFillColor,          public Color getPolygonStrokeFillColor();
1589,method,,call,isPolygonStrokeFillColorSet,           public boolean isPolygonStrokeFillColorSet();
1590,method,,call,setPolygonStrokeFillColor,           public void setPolygonStrokeFillColor(Color fillColor);
1591,method,,call,setPolygonStrokeFillColorSet,           public void setPolygonStrokeFillColorSet(boolean flag);
1592,method,,call,getPolygonStrokeFillBackgroundColor,          public Color getPolygonStrokeFillBackgroundColor();
1593,method,,call,isPolygonStrokeFillBackgroundColorSet,           public boolean isPolygonStrokeFillBackgroundColorSet();
1594,method,,call,setPolygonStrokeFillBackgroundColor,           public void setPolygonStrokeFillBackgroundColor(Color fillBackgroundColor);
1595,method,,call,setPolygonStrokeFillBackgroundColorSet,           public void setPolygonStrokeFillBackgroundColorSet(boolean flag);
1596,method,,call,]getPolygonStrokeFillGradientPoints,       public float[] getPolygonStrokeFillGradientPoints();
1597,method,,call,isPolygonStrokeFillGradientPointsSet,           public boolean isPolygonStrokeFillGradientPointsSet();
1598,method,,call,setPolygonStrokeFillGradientPoints,           public void setPolygonStrokeFillGradientPoints(float[] fillGradientPoints);
1599,method,,call,setPolygonStrokeFillGradientPointsSet,           public void setPolygonStrokeFillGradientPointsSet(boolean flag);
1600,method,,call,getPolygonStrokeFillOpacity,          public float getPolygonStrokeFillOpacity();
1601,method,,call,isPolygonStrokeFillOpacitySet,           public boolean isPolygonStrokeFillOpacitySet();
1602,method,,call,setPolygonStrokeFillOpacity,           public void setPolygonStrokeFillOpacity(float fillOpacity);
1603,method,,call,setPolygonStrokeFillOpacitySet,           public void setPolygonStrokeFillOpacitySet(boolean flag);
1604,method,,call,getPolygonStrokeFillPattern,          public FillPattern getPolygonStrokeFillPattern();
1605,method,,call,isPolygonStrokeFillPatternSet,           public boolean isPolygonStrokeFillPatternSet();
1606,method,,call,setPolygonStrokeFillPattern,           public void setPolygonStrokeFillPattern(FillPattern fillPattern);
1607,method,,call,setPolygonStrokeFillPatternSet,           public void setPolygonStrokeFillPatternSet(boolean flag);
1608,method,,call,getPolygonStrokeFillStyle,          public FillStyle getPolygonStrokeFillStyle();
1609,method,,call,isPolygonStrokeFillStyleSet,           public boolean isPolygonStrokeFillStyleSet();
1610,method,,call,setPolygonStrokeFillStyle,           public void setPolygonStrokeFillStyle(FillStyle fillStyle);
1611,method,,call,setPolygonStrokeFillStyleSet,           public void setPolygonStrokeFillStyleSet(boolean flag);
1612,method,,call,getPolygonStrokeLineCap,             public LineCap getPolygonStrokeLineCap();
1613,method,,call,isPolygonStrokeLineCapSet,               public boolean isPolygonStrokeLineCapSet();
1614,method,,call,setPolygonStrokeLineCap,               public void setPolygonStrokeLineCap(LineCap strokeLineCap);
1615,method,,call,setPolygonStrokeLineCapSet,               public void setPolygonStrokeLineCapSet(boolean flag);
1616,method,,call,getPolygonStrokeLineGap,          public float getPolygonStrokeLineGap();
1617,method,,call,isPolygonStrokeLineGapSet,               public boolean isPolygonStrokeLineGapSet();
1618,method,,call,setPolygonStrokeLineGap,               public void setPolygonStrokeLineGap(float strokeLineGap);
1619,method,,call,setPolygonStrokeLineGapSet,               public void setPolygonStrokeLineGapSet(boolean flag);
1620,method,,call,getPolygonStrokeLineJoin,            public LineJoin getPolygonStrokeLineJoin();
1621,method,,call,isPolygonStrokeLineJoinSet,               public boolean isPolygonStrokeLineJoinSet();
1622,method,,call,setPolygonStrokeLineJoin,               public void setPolygonStrokeLineJoin(LineJoin strokeLineJoin);
1623,method,,call,setPolygonStrokeLineJoinSet,               public void setPolygonStrokeLineJoinSet(boolean flag);
1624,method,,call,getPolygonStrokeLinePattern,            public LinePattern getPolygonStrokeLinePattern();
1625,method,,call,isPolygonStrokeLinePatternSet,           public boolean isPolygonStrokeLinePatternSet();
1626,method,,call,setPolygonStrokeLinePattern,           public void setPolygonStrokeLinePattern(LinePattern strokeLinePattern);
1627,method,,call,setPolygonStrokeLinePatternSet,           public void setPolygonStrokeLinePatternSet(boolean flag);
1628,method,,call,getPolygonStrokeLineStyle,             public LineStyle getPolygonStrokeLineStyle();
1629,method,,call,isPolygonStrokeLineStyleSet,               public boolean isPolygonStrokeLineStyleSet();
1630,method,,call,setPolygonStrokeLineStyle,               public void setPolygonStrokeLineStyle(LineStyle strokeLineStyle);
1631,method,,call,setPolygonStrokeLineStyleSet,               public void setPolygonStrokeLineStyleSet(boolean flag);
1632,method,,call,getPolygonStrokeOpacity,            public float getPolygonStrokeOpacity();
1633,method,,call,isPolygonStrokeOpacitySet,               public boolean isPolygonStrokeOpacitySet();
1634,method,,call,setPolygonStrokeOpacity,               public void setPolygonStrokeOpacity(float opacity);
1635,method,,call,setPolygonStrokeOpacitySet,               public void setPolygonStrokeOpacitySet(boolean flag);
1636,method,,call,getPolygonStrokeWidth,          public float getPolygonStrokeWidth();
1637,method,,call,isPolygonStrokeWidthSet,               public boolean isPolygonStrokeWidthSet();
1638,method,,call,setPolygonStrokeWidth,               public void setPolygonStrokeWidth(float width);
1639,method,,call,setPolygonStrokeWidthSet,               public void setPolygonStrokeWidthSet(boolean flag);
1656,method,,call,getBeginArrowStyle,           public ArrowStyle getBeginArrowStyle();
1657,method,,call,isBeginArrowStyleSet,               public boolean isBeginArrowStyleSet();
1658,method,,call,setBeginArrowStyle,               public void setBeginArrowStyle(ArrowStyle strokeArrowStyle);
1659,method,,call,setBeginArrowStyleSet,               public void setBeginArrowStyleSet(boolean flag);
1660,method,,call,getEndArrowStyle,           public ArrowStyle getEndArrowStyle();
1661,method,,call,isEndArrowStyleSet,           public boolean isEndArrowStyleSet();
1662,method,,call,setEndArrowStyle,           public void setEndArrowStyle(ArrowStyle strokeArrowStyle);
1663,method,,call,setEndArrowStyleSet,           public void setEndArrowStyleSet(boolean flag);
1664,method,,call,getColor,             public Color getColor();
1665,method,,call,isColorSet,               public boolean isColorSet();
1666,method,,call,setColor,               public void setColor(Color strokeColor);
1667,method,,call,setColorSet,               public void setColorSet(boolean flag);
1668,method,,call,getDashArray,          public DashArray getDashArray();
1669,method,,call,isDashArraySet,               public boolean isDashArraySet();
1670,method,,call,setDashArray,               public void setDashArray(DashArray strokeDashArray);
1671,method,,call,setDashArraySet,               public void setDashArraySet(boolean flag);
1672,method,,call,getDashOffset,          public float getDashOffset();
1673,method,,call,isDashOffsetSet,               public boolean isDashOffsetSet();
1674,method,,call,setDashOffset,               public void setDashOffset(float strokeDashOffset);
1675,method,,call,setDashOffsetSet,               public void setDashOffsetSet(boolean flag);
1676,method,,call,getFill,          public Fill getFill();
1677,method,,call,isFillSet,               public boolean isFillSet();
1678,method,,call,setFill,               public void setFill(Fill strokeFill);
1679,method,,call,setFillSet,               public void setFillSet(boolean flag);
1680,method,,call,getLineCap,          public LineCap getLineCap();
1681,method,,call,isLineCapSet,               public boolean isLineCapSet();
1682,method,,call,setLineCap,               public void setLineCap(LineCap strokeLineCap);
1683,method,,call,setLineCapSet,               public void setLineCapSet(boolean flag);
1684,method,,call,getLineGap,          public float getLineGap();
1685,method,,call,isLineGapSet,               public boolean isLineGapSet();
1686,method,,call,setLineGap,               public void setLineGap(float strokeLineGap);
1687,method,,call,setLineGapSet,               public void setLineGapSet(boolean flag);
1688,method,,call,getLineJoin,            public LineJoin getLineJoin();
1689,method,,call,isLineJoinSet,               public boolean isLineJoinSet();
1690,method,,call,setLineJoin,               public void setLineJoin(LineJoin strokeLineJoin);
1691,method,,call,setLineJoinSet,               public void setLineJoinSet(boolean flag);
1692,method,,call,getLineStyle,            public LineStyle getLineStyle();
1693,method,,call,isLineStyleSet,               public boolean isLineStyleSet();
1694,method,,call,setLineStyle,               public void setLineStyle(LineStyle strokeLineStyle);
1695,method,,call,setLineStyleSet,               public void setLineStyleSet(boolean flag);
1696,method,,call,getOpacity,            public float getOpacity();
1697,method,,call,isOpacitySet,               public boolean isOpacitySet();
1698,method,,call,setOpacity,               public void setOpacity(float opacity);
1699,method,,call,setOpacitySet,               public void setOpacitySet(boolean flag);
1700,method,,call,getWidth,          public float getWidth();
1701,method,,call,isWidthSet,               public boolean isWidthSet();
1702,method,,call,setWidth,               public void setWidth(float width);
1703,method,,call,setWidthSet,               public void setWidthSet(boolean flag);
1707,method,,call,getSymbologyPropertyCount,               public int getSymbologyPropertyCount(SymbologyInfo info);
1708,method,,call,]getSymbologyPropertyNames,           public String[] getSymbologyPropertyNames(SymbologyInfo info);
1709,method,,call,getSymbologyPropertyType,           public Class getSymbologyPropertyType(SymbologyInfo info, String propertyName);
1710,method,,call,getSymbologyProperty,           public Object getSymbologyProperty(SymbologyInfo info, String propertyName) throws IllegalArgumentException;
1711,method,,call,setSymbologyProperty,           public void setSymbologyProperty(SymbologyInfo info, String propertyName, Object value)        throws IllegalArgumentException;
1712,method,,call,getActiveSymbology,           public SymbologyInfo getActiveSymbology();
1713,method,,call,setActiveSymbology,           public void setActiveSymbology(SymbologyInfo info) throws IllegalArgumentException;
1717,method,,call,getSymbologyName,            public String getSymbologyName();
1718,method,,call,getSymbologyVersion,        public String getSymbologyVersion();
1754,method,,call,getTextFillColor,                           public Color getTextFillColor();
1755,method,,call,isTextFillColorSet,           public boolean isTextFillColorSet();
1756,method,,call,setTextFillColor,           public void setTextFillColor(Color fillColor);
1757,method,,call,setTextFillColorSet,           public void setTextFillColorSet(boolean flag);
1758,method,,call,getTextFillBackgroundColor,          public Color getTextFillBackgroundColor();
1759,method,,call,isTextFillBackgroundColorSet,           public boolean isTextFillBackgroundColorSet();
1760,method,,call,setTextFillBackgroundColor,           public void setTextFillBackgroundColor(Color fillBackgroundColor);
1761,method,,call,setTextFillBackgroundColorSet,           public void setTextFillBackgroundColorSet(boolean flag);
1762,method,,call,]getTextFillGradientPoints,       public float[] getTextFillGradientPoints();
1763,method,,call,isTextFillGradientPointsSet,           public boolean isTextFillGradientPointsSet();
1764,method,,call,setTextFillGradientPoints,           public void setTextFillGradientPoints(float[] fillGradientPoints);
1765,method,,call,setTextFillGradientPointsSet,           public void setTextFillGradientPointsSet(boolean flag);
1766,method,,call,getTextFillOpacity,          public float getTextFillOpacity();
1767,method,,call,isTextFillOpacitySet,           public boolean isTextFillOpacitySet();
1768,method,,call,setTextFillOpacity,           public void setTextFillOpacity(float fillOpacity);
1769,method,,call,setTextFillOpacitySet,           public void setTextFillOpacitySet(boolean flag);
1770,method,,call,getTextFillPattern,          public FillPattern getTextFillPattern();
1771,method,,call,isTextFillPatternSet,           public boolean isTextFillPatternSet();
1772,method,,call,setTextFillPattern,           public void setTextFillPattern(FillPattern fillPattern);
1773,method,,call,setTextFillPatternSet,           public void setTextFillPatternSet(boolean flag);
1774,method,,call,getTextFillStyle,          public FillStyle getTextFillStyle();
1775,method,,call,isTextFillStyleSet,           public boolean isTextFillStyleSet();
1776,method,,call,setTextFillStyle,           public void setTextFillStyle(FillStyle fillStyle);
1777,method,,call,setTextFillStyleSet,           public void setTextFillStyleSet(boolean flag);
1778,method,,call,getTextFont,                               public Font getTextFont();
1779,method,,call,isTextFontSet,               public boolean isTextFontSet();
1780,method,,call,setTextFont,               public void setTextFont(Font object);
1781,method,,call,setTextFontSet,               public void setTextFontSet(boolean flag);
1782,method,,call,getTextHaloRadius,                   public float getTextHaloRadius();
1783,method,,call,isTextHaloRadiusSet,               public boolean isTextHaloRadiusSet();
1784,method,,call,setTextHaloRadius,               public void setTextHaloRadius(float haloRadius);
1785,method,,call,setTextHaloRadiusSet,               public void setTextHaloRadiusSet(boolean flag);
1786,method,,call,getTextLabel,           public String getTextLabel();
1787,method,,call,isTextLabelSet,               public boolean isTextLabelSet();
1788,method,,call,setTextLabel,               public void setTextLabel(String label);
1789,method,,call,setTextLabelSet,               public void setTextLabelSet(boolean flag);
1790,method,,call,getTextLabelRotation,           public float getTextLabelRotation();
1791,method,,call,isTextLabelRotationSet,               public boolean isTextLabelRotationSet();
1792,method,,call,setTextLabelRotation,               public void setTextLabelRotation(float labelRotation);
1793,method,,call,setTextLabelRotationSet,               public void setTextLabelRotationSet(boolean flag);
1794,method,,call,getTextLabelShowLabel,          public boolean getTextLabelShowLabel();
1795,method,,call,isTextLabelShowLabelSet,               public boolean isTextLabelShowLabelSet();
1796,method,,call,setTextLabelShowLabel,               public void setTextLabelShowLabel(boolean showLabel);
1797,method,,call,setTextLabelShowLabelSet,               public void setTextLabelShowLabelSet(boolean flag);
1798,method,,call,getTextLabelXAnchor,       public XAnchor getTextLabelXAnchor();
1799,method,,call,isTextLabelXAnchorSet,               public boolean isTextLabelXAnchorSet();
1800,method,,call,setTextLabelXAnchor,               public void setTextLabelXAnchor(XAnchor labelXAnchor);
1801,method,,call,setTextLabelXAnchorSet,               public void setTextLabelXAnchorSet(boolean flag);
1802,method,,call,getTextLabelXDisplacement,          public float getTextLabelXDisplacement();
1803,method,,call,isTextLabelXDisplacementSet,               public boolean isTextLabelXDisplacementSet();
1804,method,,call,setTextLabelXDisplacement,               public void setTextLabelXDisplacement(float labelXDisplacement);
1805,method,,call,setTextLabelXDisplacementSet,               public void setTextLabelXDisplacementSet(boolean flag);
1806,method,,call,getTextLabelYAnchor,          public YAnchor getTextLabelYAnchor();
1807,method,,call,isTextLabelYAnchorSet,               public boolean isTextLabelYAnchorSet();
1808,method,,call,setTextLabelYAnchor,               public void setTextLabelYAnchor(YAnchor labelYAnchor);
1809,method,,call,setTextLabelYAnchorSet,               public void setTextLabelYAnchorSet(boolean flag);
1810,method,,call,getTextLabelYDisplacement,          public float getTextLabelYDisplacement();
1811,method,,call,isTextLabelYDisplacementSet,               public boolean isTextLabelYDisplacementSet();
1812,method,,call,setTextLabelYDisplacement,               public void setTextLabelYDisplacement(float labelYDisplacement);
1813,method,,call,setTextLabelYDisplacementSet,               public void setTextLabelYDisplacementSet(boolean flag);
1825,method,,call,getViewabilityMaxScale,                           public double getViewabilityMaxScale();
1826,method,,call,isViewabilityMaxScaleSet,               public boolean isViewabilityMaxScaleSet();
1827,method,,call,setViewabilityMaxScale,               public void setViewabilityMaxScale(double maxScale);
1828,method,,call,setViewabilityMaxScaleSet,               public void setViewabilityMaxScaleSet(boolean flag);
1829,method,,call,getViewabilityMinScale,         public double getViewabilityMinScale();
1830,method,,call,isViewabilityMinScaleSet,               public boolean isViewabilityMinScaleSet();
1831,method,,call,setViewabilityMinScale,               public void setViewabilityMinScale(double minScale);
1832,method,,call,setViewabilityMinScaleSet,               public void setViewabilityMinScaleSet(boolean flag);
1833,method,,call,getViewabilityZOrderHint,           public double getViewabilityZOrderHint();
1834,method,,call,isViewabilityZOrderHintSet,               public boolean isViewabilityZOrderHintSet();
1835,method,,call,setViewabilityZOrderHint,               public void setViewabilityZOrderHint(double zOrderHint);
1836,method,,call,setViewabilityZOrderHintSet,               public void setViewabilityZOrderHintSet(boolean flag);
1837,method,,call,getViewabilityVisible,           public boolean getViewabilityVisible();
1838,method,,call,isViewabilityVisibleSet,               public boolean isViewabilityVisibleSet();
1839,method,,call,setViewabilityVisible,               public void setViewabilityVisible(boolean visible);
1840,method,,call,setViewabilityVisibleSet,               public void setViewabilityVisibleSet(boolean flag);
1848,method,,call,newArrayList,                       private static final List VALUES = new ArrayList(3);
1849,method,,call,newXAnchor,           public static final XAnchor LEFT = new XAnchor("LEFT", "");
1850,method,,call,newXAnchor,           public static final XAnchor CENTER = new XAnchor("CENTER", "");
1851,method,,call,newXAnchor,           public static final XAnchor RIGHT = new XAnchor("RIGHT", "");
1852,method,,definition,XAnchor,                           protected XAnchor(String name, String description) {
1855,method,,definition,values,                   public static XAnchor[] values() {
1857,method,,call,VALUES.toArray,            return (XAnchor[]) VALUESDottttTtoArray(new XAnchor[VALUESDottttTsize()]);
1857,method,,call,VALUES.size,            return (XAnchor[]) VALUESDottttTtoArray(new XAnchor[VALUESDottttTsize()]);
1860,method,,definition,family,       public CodeList[] family() {
1861,method,,call,values,        return values();
1870,method,,call,newArrayList,                       private static final List VALUES = new ArrayList(4);
1871,method,,call,newYAnchor,           public static final YAnchor TOP = new YAnchor("Top", "");
1872,method,,call,newYAnchor,           public static final YAnchor MIDDLE = new YAnchor("Middle", "");
1873,method,,call,newYAnchor,           public static final YAnchor BASELINE = new YAnchor("Baseline", "");
1874,method,,call,newYAnchor,           public static final YAnchor BOTTOM = new YAnchor("Bottom", "");
1876,method,,definition,nextValue,                           private static synchronized int nextValue() {
1879,method,,definition,getNumberOfStyles,           public static int getNumberOfStyles() {
1882,method,,definition,YAnchor,                           protected YAnchor(String name, String description) {
1885,method,,definition,values,                   public static YAnchor[] values() {
1887,method,,call,VALUES.toArray,            return (YAnchor[]) VALUESDottttTtoArray(new YAnchor[VALUESDottttTsize()]);
1887,method,,call,VALUES.size,            return (YAnchor[]) VALUESDottttTtoArray(new YAnchor[VALUESDottttTsize()]);
1890,method,,definition,family,       public CodeList[] family() {
1891,method,,call,values,        return values();
1897,method,,call,]getVertices,           public DirectPosition[] getVertices();
1898,method,,call,setVertices,           public void setVertices(DirectPosition[] vertices);
1903,method,,call,setTopLeft,       public void setTopLeft(DirectPosition coord);
1904,method,,call,getTopLeft,       public DirectPosition getTopLeft();
1905,method,,call,setBottomRight,       public void setBottomRight(DirectPosition coord);
1906,method,,call,getBottomRight,       public DirectPosition getBottomRight();
1907,method,,call,getIntersection,       public BoundingRectangle getIntersection(BoundingRectangle bounds, BoundingRectangle result);
1908,method,,call,getCombinedExtent,       public BoundingRectangle getCombinedExtent(BoundingRectangle bounds, BoundingRectangle result);
1914,method,,call,isValid,       public boolean isValid();
1915,method,,call,setValid,       public void setValid(boolean newValue);
1916,method,,call,contains,       public boolean contains(DirectPosition location);
1917,method,,call,expandToInclude,       public void expandToInclude(DirectPosition location);
1918,method,,call,getCoordinateReferenceSystem,       public CoordinateReferenceSystem getCoordinateReferenceSystem();
1919,method,,call,setCoordinateReferenceSystem,       public void setCoordinateReferenceSystem(CoordinateReferenceSystem crs);
1923,method,,call,createBounds,           public Bounds createBounds(Class boundsInterface);
1930,method,,call,newGlobalPathType,        public static final GlobalPathType GREAT_CIRCLE_ELLIPSOIDAL =        new GlobalPathType("GREAT_CIRCLE_ELLIPSOIDAL",            "The path that is the shortest distance path over the WGS84 ellipsoidDottttT");
1931,method,,call,newGlobalPathType,                public static final GlobalPathType GREAT_CIRCLE_SPHERICAL =        new GlobalPathType("GREAT_CIRCLE_SPHERICAL",            "The path that is the shortest distance path over the sphere whose radius is the equatorial radius of the WGS84 ellipsoidDottttT");
1932,method,,call,newGlobalPathType,        public static final GlobalPathType RHUMBLINE_ELLIPSOIDAL =        new GlobalPathType("RHUMBLINE_ELLIPSOIDAL",            "The path that is the path of constant bearing over the WGS84 ellipsoidDottttT");
1933,method,,call,newGlobalPathType,        public static final GlobalPathType RHUMBLINE_SPHERICAL =        new GlobalPathType("RHUMBLINE_SPHERICAL",            "The path that is the path of constant bearing over the sphere whose radius is the equatorial radius of the WGS84 ellipsoidDottttT");
1944,method,,call,newArrayList,       protected static final List VALUES = new ArrayList();
1945,method,,definition,PathType,               protected PathType(String name, String description) {
1948,method,,definition,values,               public static PathType[] values() {
1950,method,,call,VALUES.toArray,            return (PathType[]) VALUESDottttTtoArray(new PathType[VALUESDottttTsize()]);
1950,method,,call,VALUES.size,            return (PathType[]) VALUESDottttTtoArray(new PathType[VALUESDottttTsize()]);
1953,method,,definition,family,       public CodeList[] family() {
1954,method,,call,values,        return values();
1959,method,,definition,UnprojectedPathType,       protected UnprojectedPathType(String name, String description) {
1962,method,,call,newUnprojectedPathType,        public static final UnprojectedPathType PIXEL_STRAIGHT =        new UnprojectedPathType("PIXEL_STRAIGHT",            "The path that is drawn as screen-straight, regardless of any current projectionDottttT");
1963,method,,call,newUnprojectedPathType,                public static final UnprojectedPathType CONTINUOUS_SPLINE =        new UnprojectedPathType("CONTINUOUS_SPLINE",            "The path that connects its points via a continuous (although not necessarily smooth) splineDottttT");
1963,method,,call,acontinuous,                public static final UnprojectedPathType CONTINUOUS_SPLINE =        new UnprojectedPathType("CONTINUOUS_SPLINE",            "The path that connects its points via a continuous (although not necessarily smooth) splineDottttT");
1967,method,,definition,VectorPathType,           protected VectorPathType(String name, String description) {
1970,method,,call,newVectorPathType,        public static final VectorPathType VECTOR =        new VectorPathType("VECTOR", "The path that is the Euclidean shortest distance pathDottttT");
1978,method,,call,getTitle,       String getTitle(Locale locale);
1979,method,,call,]getAlternateTitles,       String[] getAlternateTitles(Locale locale);
1999,method,,call,getPolygon,       public Geometry getPolygon();
2004,method,,call,getDescription,       public String getDescription(Locale locale);
2005,method,,call,getGeographicElement,       public GeographicExtent getGeographicElement();
2006,method,,call,getTemporalElement,       public TemporalExtent getTemporalElement();
2007,method,,call,getVerticalElement,       public VerticalExtent getVerticalElement();
2011,method,,call,getWestBoundLongitude,       public double getWestBoundLongitude();
2012,method,,call,getEastBoundLongitude,       public double getEastBoundLongitude();
2013,method,,call,getSouthBoundLatitude,       public double getSouthBoundLatitude();
2014,method,,call,getNorthBoundLatitude,       public double getNorthBoundLatitude();
2019,method,,call,getGeographicIdentifier,       public Identifier getGeographicIdentifier();
2023,method,,call,isInclusion,       public boolean isInclusion();
2027,method,,call,]getSpatialExtent,       public GeographicExtent[] getSpatialExtent();
2032,method,,call,getStartTime,       public Date getStartTime();
2033,method,,call,getEndTime,       public Date getEndTime();
2039,method,,call,getMinimumValue,       public double getMinimumValue();
2040,method,,call,getMaximumValue,       public double getMaximumValue();
2041,method,,call,getUnit,       public Unit getUnit();
2042,method,,call,getVerticalDatum,       public VerticalDatum getVerticalDatum();
2047,method,,call,createValue,       GeneralParameterValue createValue();
2048,method,,call,getMinimumOccurs,       int getMinimumOccurs();
2049,method,,call,getMaximumOccurs,       int getMaximumOccurs();
2054,method,,call,getDescriptor,       GeneralOperationParameter getDescriptor();
2055,method,,call,clone,       Object clone();
2061,method,,definition,InvalidParameterNameException,       public InvalidParameterNameException(String message, String parameterName) {
2065,method,,definition,getParameterName,       public String getParameterName() {
2073,method,,definition,InvalidParameterTypeException,       public InvalidParameterTypeException(String message, String parameterName) {
2077,method,,definition,getParameterName,       public String getParameterName() {
2086,method,,definition,InvalidParameterValueException,       public InvalidParameterValueException(String message, String parameterName, Object value) {
2091,method,,definition,InvalidParameterValueException,       public InvalidParameterValueException(String message, String parameterName, double value) {
2092,method,,call,newDouble,        this(message, parameterName, new Double(value));
2094,method,,definition,InvalidParameterValueException,       public InvalidParameterValueException(String message, String parameterName, int value) {
2095,method,,call,newInteger,        this(message, parameterName, new Integer(value));
2097,method,,definition,getParameterName,       public String getParameterName() {
2100,method,,definition,getValue,       public Object getValue() {
2108,method,,call,getValueClass,          Class getValueClass();
2109,method,,call,getValidValues,       Set getValidValues();
2110,method,,call,getDefaultValue,       Object getDefaultValue();
2111,method,,call,getMinimumValue,       Comparable getMinimumValue();
2112,method,,call,getMaximumValue,       Comparable getMaximumValue();
2113,method,,call,getUnit,       Unit getUnit();
2117,method,,call,]getParameters,          GeneralOperationParameter[] getParameters();
2118,method,,call,getParameter,       GeneralOperationParameter getParameter(String name) throws ParameterNotFoundException;
2124,method,,definition,ParameterNotFoundException,       public ParameterNotFoundException(String message, String parameterName) {
2128,method,,definition,getParameterName,       public String getParameterName() {
2136,method,,call,getUnit,          Unit getUnit();
2137,method,,call,doubleValue,       double doubleValue(Unit unit) throws InvalidParameterTypeException;
2138,method,,call,doubleValue,       double doubleValue() throws InvalidParameterTypeException;
2139,method,,call,intValue,       int intValue() throws InvalidParameterTypeException;
2140,method,,call,booleanValue,       boolean booleanValue() throws InvalidParameterTypeException;
2141,method,,call,stringValue,       String stringValue() throws InvalidParameterTypeException;
2142,method,,call,]doubleValueList,       double[] doubleValueList(final Unit unit) throws InvalidParameterTypeException;
2143,method,,call,]doubleValueList,       double[] doubleValueList() throws InvalidParameterTypeException;
2144,method,,call,]intValueList,       int[] intValueList() throws InvalidParameterTypeException;
2145,method,,call,valueFile,       URL valueFile() throws InvalidParameterTypeException;
2146,method,,call,getValue,       Object getValue();
2147,method,,call,setValue,       void setValue(double[] values, Unit unit) throws InvalidParameterValueException;
2148,method,,call,setValue,       void setValue(double value, Unit unit) throws InvalidParameterValueException;
2149,method,,call,setValue,       void setValue(double value) throws InvalidParameterValueException;
2150,method,,call,setValue,       void setValue(int value) throws InvalidParameterValueException;
2151,method,,call,setValue,       void setValue(boolean value) throws InvalidParameterValueException;
2152,method,,call,setValue,       void setValue(Object value) throws InvalidParameterValueException;
2153,method,,call,clone,       Object clone();
2157,method,,call,]getValues,          GeneralParameterValue[] getValues();
2158,method,,call,getValue,       GeneralParameterValue getValue(String name) throws ParameterNotFoundException;
2159,method,,call,clone,       Object clone();
2166,method,,call,getFactory,       Factory getFactory();
2167,method,,call,getAuthority,       Citation getAuthority();
2168,method,,call,getAuthorityCodes,       Set getAuthorityCodes(Class type) throws FactoryException;
2169,method,,call,getDescriptionText,       String getDescriptionText(String code, Locale locale) throws FactoryException;
2170,method,,call,createObject,       Object createObject(String code) throws FactoryException;
2174,method,,call,]getCoordinateReferenceSystems,       CoordinateReferenceSystem[] getCoordinateReferenceSystems();
2181,method,,call,getCoordinateSystem,       CoordinateSystem getCoordinateSystem();
2182,method,,call,getDatum,       Datum getDatum();
2189,method,,call,createCoordinateReferenceSystem,       CoordinateReferenceSystem createCoordinateReferenceSystem(String code) throws FactoryException;
2190,method,,call,createCompoundCRS,       CompoundCRS createCompoundCRS(String code) throws FactoryException;
2191,method,,call,createDerivedCRS,       DerivedCRS createDerivedCRS(String code) throws FactoryException;
2192,method,,call,createEngineeringCRS,                   EngineeringCRS createEngineeringCRS(String code) throws FactoryException;
2193,method,,call,createGeographicCRS,       GeographicCRS createGeographicCRS(String code) throws FactoryException;
2194,method,,call,createGeocentricCRS,       GeocentricCRS createGeocentricCRS(String code) throws FactoryException;
2195,method,,call,createImageCRS,       ImageCRS createImageCRS(String code) throws FactoryException;
2196,method,,call,createProjectedCRS,       ProjectedCRS createProjectedCRS(String code) throws FactoryException;
2197,method,,call,createTemporalCRS,       TemporalCRS createTemporalCRS(String code) throws FactoryException;
2198,method,,call,createVerticalCRS,       VerticalCRS createVerticalCRS(String code) throws FactoryException;
2219,method,,call,createCompoundCRS,       CompoundCRS createCompoundCRS(Map                       properties,                                  CoordinateReferenceSystem[] elements) throws FactoryException;
2220,method,,call,createEngineeringCRS,       EngineeringCRS createEngineeringCRS(Map         properties,                                        EngineeringDatum datum,                                        CoordinateSystem    cs) throws FactoryException;
2221,method,,call,createGeocentricCRS,       GeocentricCRS createGeocentricCRS(Map      properties,                                      GeodeticDatum datum,                                      CartesianCS      cs) throws FactoryException;
2222,method,,call,createGeocentricCRS,       GeocentricCRS createGeocentricCRS(Map      properties,                                      GeodeticDatum datum,                                      SphericalCS      cs) throws FactoryException;
2223,method,,call,createGeographicCRS,       GeographicCRS createGeographicCRS(Map      properties,                                      GeodeticDatum datum,                                      EllipsoidalCS    cs) throws FactoryException;
2224,method,,call,createImageCRS,           ImageCRS createImageCRS(Map      properties,                            ImageDatum    datum,                            CoordinateSystem cs) throws FactoryException;
2225,method,,call,createDerivedCRS,       DerivedCRS createDerivedCRS(Map                 properties,                                CoordinateReferenceSystem base,                                MathTransform    baseToDerived,                                CoordinateSystem     derivedCS) throws FactoryException;
2226,method,,call,createProjectedCRS,           ProjectedCRS createProjectedCRS(Map            properties,                                    GeographicCRS      geoCRS,                                    MathTransform toProjected,                                    CartesianCS            cs) throws FactoryException;
2227,method,,call,createProjectedCRS,       ProjectedCRS createProjectedCRS(Map                          properties,                                    GeographicCRS                    geoCRS,                                    String                   projectionName,                                    GeneralParameterValue[] parameterValues,                                    CartesianCS                          cs) throws FactoryException;
2228,method,,call,createTemporalCRS,       TemporalCRS createTemporalCRS(Map      properties,                                  TemporalDatum datum,                                  TemporalCS       cs) throws FactoryException;
2229,method,,call,createVerticalCRS,       VerticalCRS createVerticalCRS(Map     properties,                                 VerticalDatum datum,                                 VerticalCS       cs) throws FactoryException;
2230,method,,call,createFromXML,       CoordinateReferenceSystem createFromXML(String xml) throws FactoryException;
2231,method,,call,createFromWKT,       CoordinateReferenceSystem createFromWKT(String wkt) throws FactoryException;
2244,method,,call,getBaseCRS,       CoordinateReferenceSystem getBaseCRS();
2245,method,,call,getConversionFromBase,       Conversion getConversionFromBase();
2253,method,,call,getCoordinateSystem,       CoordinateSystem getCoordinateSystem();
2287,method,,call,newArrayList,       private static final List VALUES = new ArrayList(13);
2288,method,,call,newAxisDirection,                       public static final AxisDirection OTHER = new AxisDirection("OTHER");
2289,method,,call,newAxisDirection,        public static final AxisDirection NORTH = new AxisDirection("NORTH");
2290,method,,call,newAxisDirection,        public static final AxisDirection SOUTH = new AxisDirection("SOUTH");
2291,method,,call,newAxisDirection,        public static final AxisDirection EAST = new AxisDirection("EAST");
2292,method,,call,newAxisDirection,        public static final AxisDirection WEST = new AxisDirection("WEST");
2293,method,,call,newAxisDirection,        public static final AxisDirection UP = new AxisDirection("UP");
2294,method,,call,newAxisDirection,        public static final AxisDirection DOWN = new AxisDirection("DOWN");
2295,method,,call,newAxisDirection,        public static final AxisDirection RIGHT = new AxisDirection("RIGHT");
2296,method,,call,newAxisDirection,        public static final AxisDirection LEFT = new AxisDirection("LEFT");
2297,method,,call,newAxisDirection,        public static final AxisDirection TOP = new AxisDirection("TOP");
2298,method,,call,newAxisDirection,        public static final AxisDirection BOTTOM = new AxisDirection("BOTTOM");
2299,method,,call,newAxisDirection,        public static final AxisDirection FUTURE = new AxisDirection("FUTURE");
2300,method,,call,newAxisDirection,        public static final AxisDirection PAST = new AxisDirection("PAST");
2301,method,,call,=values,        private static final AxisDirection[] STANDARD_VALUES = values();
2302,method,,definition,AxisDirection,       public AxisDirection(final String name) {
2305,method,,definition,values,       public static AxisDirection[] values() {
2307,method,,call,VALUES.toArray,            return (AxisDirection[]) VALUESDottttTtoArray(new AxisDirection[VALUESDottttTsize()]);
2307,method,,call,VALUES.size,            return (AxisDirection[]) VALUESDottttTtoArray(new AxisDirection[VALUESDottttTsize()]);
2310,method,,definition,family,       public CodeList[] family() {
2311,method,,call,values,        return values();
2313,method,,definition,inverse,       public AxisDirection inverse() {
2314,method,,call,=ordinal,        final int value = ordinal()-1;
2322,method,,definition,absolute,       public AxisDirection absolute() {
2323,method,,call,=ordinal,        final int value = ordinal()-1;
2338,method,,call,getDimension,       int getDimension();
2339,method,,call,getAxis,       CoordinateSystemAxis getAxis(int dimension) throws IndexOutOfBoundsException;
2345,method,,call,getAbbreviation,       String getAbbreviation();
2346,method,,call,getDirection,       AxisDirection getDirection();
2347,method,,call,getUnit,       Unit getUnit();
2355,method,,call,createCoordinateSystem,       CoordinateSystem createCoordinateSystem(String code) throws FactoryException;
2356,method,,call,createCartesianCS,       CartesianCS createCartesianCS(String code) throws FactoryException;
2357,method,,call,createPolarCS,       PolarCS createPolarCS(String code) throws FactoryException;
2358,method,,call,createCylindricalCS,       CylindricalCS createCylindricalCS(String code) throws FactoryException;
2359,method,,call,createSphericalCS,       SphericalCS createSphericalCS(String code) throws FactoryException;
2360,method,,call,createEllipsoidalCS,       EllipsoidalCS createEllipsoidalCS(String code) throws FactoryException;
2361,method,,call,createVerticalCS,       VerticalCS createVerticalCS(String code) throws FactoryException;
2362,method,,call,createTemporalCS,       TemporalCS createTemporalCS(String code) throws FactoryException;
2363,method,,call,createCoordinateSystemAxis,       CoordinateSystemAxis createCoordinateSystemAxis(String code) throws FactoryException;
2364,method,,call,createUnit,       Unit createUnit(String code) throws FactoryException;
2372,method,,call,createCoordinateSystemAxis,       CoordinateSystemAxis createCoordinateSystemAxis(Map           properties,                                                    String        abbreviation,                                                    AxisDirection direction,                                                    Unit          unit) throws FactoryException;
2373,method,,call,createCartesianCS,       CartesianCS createCartesianCS(Map             properties,                                  CoordinateSystemAxis axis0,                                  CoordinateSystemAxis axis1) throws FactoryException;
2374,method,,call,createCartesianCS,       CartesianCS createCartesianCS(Map             properties,                                  CoordinateSystemAxis axis0,                                  CoordinateSystemAxis axis1,                                  CoordinateSystemAxis axis2) throws FactoryException;
2375,method,,call,createPolarCS,       PolarCS createPolarCS(Map             properties,                          CoordinateSystemAxis axis0,                          CoordinateSystemAxis axis1) throws FactoryException;
2376,method,,call,createCylindricalCS,       CylindricalCS createCylindricalCS(Map            properties,                                      PolarCS           polarCS,                                      CoordinateSystemAxis axis) throws FactoryException;
2377,method,,call,createSphericalCS,       SphericalCS createSphericalCS(Map             properties,                                  CoordinateSystemAxis axis0,                                  CoordinateSystemAxis axis1,                                  CoordinateSystemAxis axis2) throws FactoryException;
2378,method,,call,createEllipsoidalCS,       EllipsoidalCS createEllipsoidalCS(Map             properties,                                      CoordinateSystemAxis axis0,                                      CoordinateSystemAxis axis1) throws FactoryException;
2379,method,,call,createEllipsoidalCS,       EllipsoidalCS createEllipsoidalCS(Map             properties,                                      CoordinateSystemAxis axis0,                                      CoordinateSystemAxis axis1,                                      CoordinateSystemAxis axis2) throws FactoryException;
2380,method,,call,createVerticalCS,       VerticalCS createVerticalCS(Map properties, CoordinateSystemAxis axis) throws FactoryException;
2381,method,,call,createTemporalCS,       TemporalCS createTemporalCS(Map properties, CoordinateSystemAxis axis) throws FactoryException;
2416,method,,call,getAnchorPoint,       String getAnchorPoint(Locale locale);
2417,method,,call,getRealizationEpoch,       Date getRealizationEpoch();
2418,method,,call,getValidArea,       Extent getValidArea();
2419,method,,call,getScope,       String getScope(Locale locale);
2427,method,,call,createDatum,       Datum createDatum(String code) throws FactoryException;
2428,method,,call,createEngineeringDatum,       EngineeringDatum createEngineeringDatum(String code) throws FactoryException;
2429,method,,call,createImageDatum,       ImageDatum createImageDatum(String code) throws FactoryException;
2430,method,,call,createVerticalDatum,       VerticalDatum createVerticalDatum(String code) throws FactoryException;
2431,method,,call,createTemporalDatum,       TemporalDatum createTemporalDatum(String code) throws FactoryException;
2432,method,,call,createGeodeticDatum,       GeodeticDatum createGeodeticDatum(String code) throws FactoryException;
2433,method,,call,createEllipsoid,       Ellipsoid createEllipsoid(String code) throws FactoryException;
2434,method,,call,createPrimeMeridian,       PrimeMeridian createPrimeMeridian(String code) throws FactoryException;
2435,method,,call,geoidFromWktName,       String geoidFromWktName(String wkt);
2436,method,,call,wktFromGeoidName,       String wktFromGeoidName(String geoid);
2445,method,,call,createEngineeringDatum,       EngineeringDatum createEngineeringDatum(Map properties) throws FactoryException;
2446,method,,call,createGeodeticDatum,       GeodeticDatum createGeodeticDatum(Map           properties,                                      Ellipsoid     ellipsoid,                                      PrimeMeridian primeMeridian) throws FactoryException;
2447,method,,call,createImageDatum,       ImageDatum createImageDatum(Map properties, PixelInCell pixelInCell) throws FactoryException;
2448,method,,call,createTemporalDatum,       TemporalDatum createTemporalDatum(Map properties, Date origin) throws FactoryException;
2449,method,,call,createVerticalDatum,       VerticalDatum createVerticalDatum(Map properties, VerticalDatumType type) throws FactoryException;
2450,method,,call,createEllipsoid,       Ellipsoid createEllipsoid(Map    properties,                              double semiMajorAxis,                              double semiMinorAxis,                              Unit   unit) throws FactoryException;
2451,method,,call,createFlattenedSphere,       Ellipsoid createFlattenedSphere(Map    properties,                                    double semiMajorAxis,                                    double inverseFlattening,                                    Unit   unit) throws FactoryException;
2452,method,,call,createPrimeMeridian,       PrimeMeridian createPrimeMeridian(Map    properties,                                      double longitude,                                      Unit   angularUnit) throws FactoryException;
2458,method,,call,getAxisUnit,       Unit getAxisUnit();
2459,method,,call,getSemiMajorAxis,       double getSemiMajorAxis();
2460,method,,call,getSemiMinorAxis,       double getSemiMinorAxis();
2461,method,,call,getInverseFlattening,       double getInverseFlattening();
2462,method,,call,isIvfDefinitive,       boolean isIvfDefinitive();
2463,method,,call,isSphere,       boolean isSphere();
2470,method,,call,getEllipsoid,       Ellipsoid getEllipsoid();
2471,method,,call,getPrimeMeridian,       PrimeMeridian getPrimeMeridian();
2475,method,,call,getPixelInCell,       PixelInCell getPixelInCell();
2483,method,,call,newArrayList,       private static final List VALUES = new ArrayList(2);
2484,method,,call,newPixelInCell,       public static final PixelInCell CELL_CENTER = new PixelInCell("CELL_CENTER");
2485,method,,call,newPixelInCell,       public static final PixelInCell CELL_CORNER = new PixelInCell("CELL_CORNER");
2486,method,,definition,PixelInCell,       public PixelInCell(final String name) {
2489,method,,definition,values,       public static PixelInCell[] values() {
2491,method,,call,VALUES.toArray,            return (PixelInCell[]) VALUESDottttTtoArray(new PixelInCell[VALUESDottttTsize()]);
2491,method,,call,VALUES.size,            return (PixelInCell[]) VALUESDottttTtoArray(new PixelInCell[VALUESDottttTsize()]);
2494,method,,definition,family,       public CodeList[] family() {
2495,method,,call,values,        return values();
2502,method,,call,getGreenwichLongitude,       double getGreenwichLongitude();
2503,method,,call,getAngularUnit,       Unit getAngularUnit();
2509,method,,call,getOrigin,       Date getOrigin();
2510,method,,call,getAnchorPoint,       String getAnchorPoint(Locale locale);
2511,method,,call,getRealizationEpoch,       Date getRealizationEpoch();
2515,method,,call,getVerticalDatumType,       VerticalDatumType getVerticalDatumType();
2523,method,,call,newArrayList,       private static final List VALUES = new ArrayList(6);
2524,method,,call,newVerticalDatumType,       public static final VerticalDatumType OTHER_SURFACE = new VerticalDatumType("OTHER_SURFACE");
2525,method,,call,newVerticalDatumType,       public static final VerticalDatumType GEOIDAL = new VerticalDatumType("GEOIDAL");
2526,method,,call,newVerticalDatumType,       public static final VerticalDatumType ELLIPSOIDAL = new VerticalDatumType("ELLIPSOIDAL");
2527,method,,call,newVerticalDatumType,       public static final VerticalDatumType DEPTH = new VerticalDatumType("DEPTH");
2528,method,,call,newVerticalDatumType,       public static final VerticalDatumType BAROMETRIC = new VerticalDatumType("BAROMETRIC");
2529,method,,call,newVerticalDatumType,       public static final VerticalDatumType ORTHOMETRIC = new VerticalDatumType("ORTHOMETRIC");
2530,method,,definition,VerticalDatumType,       public VerticalDatumType(final String name) {
2533,method,,definition,values,       public static VerticalDatumType[] values() {
2535,method,,call,VALUES.toArray,            return (VerticalDatumType[]) VALUESDottttTtoArray(new VerticalDatumType[VALUESDottttTsize()]);
2535,method,,call,VALUES.size,            return (VerticalDatumType[]) VALUESDottttTtoArray(new VerticalDatumType[VALUESDottttTsize()]);
2538,method,,definition,family,       public CodeList[] family() {
2539,method,,call,values,        return values();
2545,method,,call,getVendor,       Citation getVendor();
2550,method,,definition,FactoryException,       public FactoryException() {
2552,method,,definition,FactoryException,       public FactoryException(String message) {
2555,method,,definition,FactoryException,       public FactoryException(Exception cause) {
2556,method,,call,cause.getLocalizedMessage,        super(causeDottttTgetLocalizedMessage(), cause);
2558,method,,definition,FactoryException,       public FactoryException(String message, Throwable cause) {
2566,method,,call,getCode,       String getCode();
2567,method,,call,getCodeSpace,       String getCodeSpace();
2568,method,,call,getVersion,       String getVersion();
2569,method,,call,getAuthority,       Citation getAuthority();
2570,method,,call,getRemarks,       String getRemarks(Locale locale);
2575,method,,call,getName,       String getName(Locale locale);
2576,method,,call,]getIdentifiers,       Identifier[] getIdentifiers();
2577,method,,call,getRemarks,       String getRemarks(Locale locale);
2584,method,,definition,NoSuchAuthorityCodeException,       public NoSuchAuthorityCodeException(String message, String authority, String code) {
2589,method,,definition,getAuthority,       public String getAuthority() {
2592,method,,definition,getAuthorityCode,       public String getAuthorityCode() {
2600,method,,definition,NoSuchClassificationException,       public NoSuchClassificationException(final String message, final String classification) {
2604,method,,definition,getClassification,           public String getClassification() {
2610,method,,call,]getOperations,       SingleOperation[] getOperations();
2617,method,,call,getOperationVersion,       String getOperationVersion();
2626,method,,call,getSourceCRS,       CoordinateReferenceSystem getSourceCRS();
2627,method,,call,getTargetCRS,       CoordinateReferenceSystem getTargetCRS();
2628,method,,call,getOperationVersion,       String getOperationVersion();
2629,method,,call,]getPositionalAccuracy,       PositionalAccuracy[] getPositionalAccuracy();
2630,method,,call,getValidArea,       Extent getValidArea();
2631,method,,call,getScope,       String getScope(Locale locale);
2632,method,,call,getMathTransform,           MathTransform getMathTransform();
2640,method,,call,createCoordinateOperation,       CoordinateOperation createCoordinateOperation(String code) throws FactoryException;
2641,method,,call,createFromCoordinateReferenceSystemCodes,       CoordinateOperation createFromCoordinateReferenceSystemCodes(String sourceCode, String targetCode) throws FactoryException;
2648,method,,call,createOperation,       CoordinateOperation createOperation(CoordinateReferenceSystem sourceCRS, CoordinateReferenceSystem targetCRS) throws FactoryException;
2649,method,,call,createOperation,       CoordinateOperation createOperation(CoordinateReferenceSystem sourceCRS, CoordinateReferenceSystem targetCRS, OperationMethod method) throws FactoryException;
2657,method,,definition,IncompatibleOperationException,       public IncompatibleOperationException(String message, String operationName) {
2661,method,,definition,getOperationName,       public String getOperationName() {
2669,method,,call,getDimSource,       int getDimSource();
2670,method,,call,getDimTarget,           int getDimTarget();
2671,method,,call,transform,           DirectPosition transform(DirectPosition ptSrc, DirectPosition ptDst)            throws MismatchedDimensionException, TransformException;
2672,method,,call,transform,           void transform(double[] srcPts, int srcOff,                   double[] dstPts, int dstOff,                   int numPts) throws TransformException;
2673,method,,call,transform,           void transform(float[] srcPts, int srcOff,                   float[] dstPts, int dstOff,                   int numPts) throws TransformException;
2674,method,,call,derivative,       Matrix derivative(final DirectPosition point)            throws MismatchedDimensionException, TransformException;
2675,method,,call,inverse,           MathTransform inverse() throws NoninvertibleTransformException;
2676,method,,call,isIdentity,           boolean isIdentity();
2680,method,,call,transform,       double transform(final double value) throws TransformException;
2681,method,,call,derivative,           double derivative(final double value) throws TransformException;
2687,method,,call,transform,       Point2D transform(final Point2D ptSrc, final Point2D ptDst) throws TransformException;
2688,method,,call,createTransformedShape,       Shape createTransformedShape(final Shape shape) throws TransformException;
2689,method,,call,derivative,       Matrix derivative(final Point2D point) throws TransformException;
2697,method,,call,createAffineTransform,       MathTransform createAffineTransform(Matrix matrix) throws FactoryException;
2698,method,,call,createConcatenatedTransform,       MathTransform createConcatenatedTransform(MathTransform transform1, MathTransform transform2) throws FactoryException;
2699,method,,call,createPassThroughTransform,       MathTransform createPassThroughTransform(int firstAffectedOrdinate, MathTransform subTransform, int numTrailingOrdinates) throws FactoryException;
2700,method,,call,createParameterizedTransform,       MathTransform createParameterizedTransform(String classification, GeneralParameterValue[] parameters) throws FactoryException;
2701,method,,call,]getDefaultParameters,       GeneralParameterValue[] getDefaultParameters(String classification) throws NoSuchClassificationException;
2702,method,,call,createFromXML,       MathTransform createFromXML(String xml) throws FactoryException;
2703,method,,call,createFromWKT,       MathTransform createFromWKT(String wkt) throws FactoryException;
2708,method,,call,getNumRow,       int getNumRow();
2709,method,,call,getNumCol,           int getNumCol();
2710,method,,call,getElement,           double getElement(int row, int column);
2711,method,,call,setElement,           void setElement(int row, int column, double value);
2712,method,,call,isIdentity,           boolean isIdentity();
2713,method,,call,clone,       Object clone();
2718,method,,definition,NoninvertibleTransformException,       public NoninvertibleTransformException() {
2720,method,,definition,NoninvertibleTransformException,       public NoninvertibleTransformException(String message) {
2723,method,,definition,NoninvertibleTransformException,       public NoninvertibleTransformException(String message, Throwable cause) {
2730,method,,call,getMethod,       OperationMethod getMethod();
2731,method,,call,]getParameterValues,       GeneralParameterValue[] getParameterValues();
2738,method,,call,getFormula,       String getFormula(Locale locale);
2739,method,,call,getSourceDimensions,       int getSourceDimensions();
2740,method,,call,getTargetDimensions,       int getTargetDimensions();
2741,method,,call,]getParameters,       GeneralOperationParameter[] getParameters();
2745,method,,call,getOperation,       Operation getOperation();
2746,method,,call,]getModifiedCoordinates,       int[] getModifiedCoordinates();
2760,method,,call,getOperationVersion,       String getOperationVersion();
2766,method,,definition,TransformException,       public TransformException() {
2768,method,,definition,TransformException,       public TransformException(String message) {
2771,method,,definition,TransformException,       public TransformException(String message, Throwable cause) {
2778,method,,call,getResult,       double getResult();
2779,method,,call,getUnit,       Unit getUnit();
2784,method,,call,getRowIndex,       int getRowIndex();
2785,method,,call,getColumnIndex,       int getColumnIndex();
2786,method,,call,getCovariance,       double getCovariance();
2787,method,,call,getUnit,       Unit getUnit();
2793,method,,call,]getElements,       CovarianceElement[] getElements();
2794,method,,call,getUnit,       Unit getUnit(int row, int column);
2798,method,,call,getMeasureDescription,       String getMeasureDescription();
2803,method,,call,getResult,       double getResult();
2804,method,,call,getUnit,       Unit getUnit();
2810,method,,call,getValidArea,       Extent getValidArea();
2811,method,,call,getScope,       String getScope(Locale locale);
2829,method,,call,isCycle,       public boolean isCycle();
2836,method,,call,isMaximal,       public boolean isMaximal();
2837,method,,call,]getSuperComplexex,       public Complex[] getSuperComplexex();
2838,method,,call,]getSubComplexes,       public Complex[] getSubComplexes();
2839,method,,call,getElements,       public Set getElements();
2849,method,,call,getGenerators,       public List getGenerators();
2855,method,,call,getGenerators,       public List getGenerators();
2861,method,,call,getGenerators,       public List getGenerators();
2867,method,,call,getDimension,       public int getDimension();
2868,method,,call,]getCoordinates,       public double[] getCoordinates();
2869,method,,call,getOrdinate,       public double getOrdinate(int dimension) throws IndexOutOfBoundsException;
2870,method,,call,setOrdinate,       public void setOrdinate(int dimension, double value) throws IndexOutOfBoundsException;
2871,method,,call,getCoordinateReferenceSystem,       public CoordinateReferenceSystem getCoordinateReferenceSystem();
2875,method,,call,getUpperCorner,       public DirectPosition getUpperCorner();
2876,method,,call,getLowerCorner,       public DirectPosition getLowerCorner();
2882,method,,call,getCenter,       public DirectPosition getCenter();
2883,method,,call,getRadius,       public double getRadius();
2884,method,,call,getStartAngle,       public Bearing getStartAngle();
2885,method,,call,getEndAngle,       public Bearing getEndAngle();
2895,method,,call,getNumArc,       public int getNumArc();
2896,method,,call,getControlPoints,       public PointArray getControlPoints();
2897,method,,call,getInterpolation,       public CurveInterpolation getInterpolation();
2898,method,,call,asArcs,       public List asArcs();
2905,method,,call,]getBulges,       public double[] getBulges();
2906,method,,call,getNumArc,       public int getNumArc();
2907,method,,call,getNormals,       public List getNormals();
2908,method,,call,getInterpolation,       public CurveInterpolation getInterpolation();
2909,method,,call,asArcString,       public ArcString asArcString();
2921,method,,call,getStartPoint,       public DirectPosition getStartPoint();
2922,method,,call,getEndPoint,       public DirectPosition getEndPoint();
2923,method,,call,]getTangent,       public double[] getTangent(double s);
2924,method,,call,getStartParam,       public double getStartParam();
2925,method,,call,getEndParam,       public double getEndParam();
2926,method,,call,getStartConstructiveParam,       public double getStartConstructiveParam();
2927,method,,call,getEndConstructiveParam,       public double getEndConstructiveParam();
2928,method,,call,getConstructiveParam,       public DirectPosition getConstructiveParam(double cp);
2929,method,,call,getParam,       public DirectPosition getParam(double s);
2930,method,,call,getParamForPoint,       public ParamForPoint getParamForPoint(DirectPosition p);
2931,method,,call,length,       public double length(Position point1, Position point2);
2932,method,,call,length,       public double length(double cparam1, double cparam2);
2933,method,,call,asLineString,       public LineString asLineString(double maxSpacing, double maxOffset);
2938,method,,call,]getUpNormal,       public double[] getUpNormal(DirectPosition point);
2939,method,,call,getPerimeter,       public double getPerimeter();
2940,method,,call,getArea,       public double getArea();
2950,method,,call,getControlPoints,       public PointArray getControlPoints();
2951,method,,call,getInterpolation,       public CurveInterpolation getInterpolation();
2952,method,,call,asGeodesics,       public List asGeodesics();
2958,method,,call,getCoordinateReferenceSystem,       public CoordinateReferenceSystem getCoordinateReferenceSystem();
2959,method,,call,createLineSegment,       public LineSegment createLineSegment(Position startPoint, Position endPoint);
2960,method,,call,createLineString,       public LineString createLineString(List points);
2961,method,,call,createGeodesic,       public Geodesic createGeodesic(Position startPoint, Position endPoint);
2962,method,,call,createGeodesicString,       public GeodesicString createGeodesicString(List points);
2963,method,,call,createArc,       public Arc createArc(Position startPoint, Position midPoint, Position endPoint);
2964,method,,call,createArc,       public Arc createArc(Position startPoint, Position endPoint, double bulge, double[] normal);
2965,method,,call,createArcString,       public ArcString createArcString(List points);
2966,method,,call,createArcByBulge,       public ArcByBulge createArcByBulge(Position startPoint, Position endPoint, double bulge, double[] normal);
2967,method,,call,createArcStringByBulge,       public ArcStringByBulge createArcStringByBulge(List points, double[] bulges,                                                   List normals);
2976,method,,call,getControlPoints,       public PointArray getControlPoints();
2977,method,,call,asLineSegments,       public List asLineSegments();
2982,method,,call,getDistance,       public double getDistance();
2983,method,,call,getPosition,       public DirectPosition getPosition();
2990,method,,call,length,       public int length();
2991,method,,call,getDimension,       public int getDimension();
2992,method,,call,getCoordinateReferenceSystem,       public CoordinateReferenceSystem getCoordinateReferenceSystem();
2993,method,,call,get,       public DirectPosition get(int column) throws IndexOutOfBoundsException;
2994,method,,call,get,       public DirectPosition get(int column, DirectPosition dest) throws IndexOutOfBoundsException;
2995,method,,call,set,       public void set(int column, DirectPosition position) throws IndexOutOfBoundsException,                                                                UnsupportedOperationException;
2996,method,,call,]toArray,           public DirectPosition[] toArray();
2997,method,,call,positions,       public List positions();
3003,method,,call,width,       public int width();
3004,method,,call,height,       public int height();
3005,method,,call,get,       public DirectPosition get(int row, int column) throws IndexOutOfBoundsException;
3006,method,,call,get,       public DirectPosition get(int row, int column, DirectPosition dest) throws IndexOutOfBoundsException;
3007,method,,call,set,       public void set(int row, int column, DirectPosition position) throws IndexOutOfBoundsException,                                                                         UnsupportedOperationException;
3008,method,,call,getRow,       public PointArray getRow(int row) throws IndexOutOfBoundsException;
3009,method,,call,rows,       public List rows();
3015,method,,call,getDirect,       public DirectPosition getDirect();
3016,method,,call,getIndirect,       public Point getIndirect();
3026,method,,call,getCoordinateReferenceSystem,       public CoordinateReferenceSystem getCoordinateReferenceSystem();
3027,method,,call,getMbRegion,       public Geometry getMbRegion();
3028,method,,call,getRepresentativePoint,       public DirectPosition getRepresentativePoint();
3029,method,,call,getBoundary,       public Boundary getBoundary();
3030,method,,call,getClosure,       public Complex getClosure();
3031,method,,call,isSimple,       public boolean isSimple();
3032,method,,call,isCycle,       public boolean isCycle();
3033,method,,call,getDistance,       public double getDistance(Geometry geometry);
3034,method,,call,getDimension,       public int getDimension(DirectPosition point);
3035,method,,call,getCoordinateDimension,       public int getCoordinateDimension();
3036,method,,call,getMaximalComplex,       public Set getMaximalComplex();
3037,method,,call,transform,       public Geometry transform(CoordinateReferenceSystem newCRS) throws TransformException;
3038,method,,call,transform,       public Geometry transform(CoordinateReferenceSystem newCRS, MathTransform transform) throws TransformException;
3039,method,,call,getEnvelope,       public Envelope getEnvelope();
3040,method,,call,getCentroid,       public DirectPosition getCentroid();
3041,method,,call,getConvexHull,       public Geometry getConvexHull();
3042,method,,call,getBuffer,       public Geometry getBuffer(double distance);
3047,method,,definition,MismatchedDimensionException,       public MismatchedDimensionException() {
3050,method,,definition,MismatchedDimensionException,           public MismatchedDimensionException(final String message) {
3056,method,,call,]getAngles,       public double[] getAngles();
3057,method,,call,]getDirection,       public double[] getDirection();
3063,method,,call,getSegments,       public List getSegments();
3067,method,,call,getStartPoint,       public Point getStartPoint();
3068,method,,call,getEndPoint,       public Point getEndPoint();
3077,method,,call,newArrayList,       private static final List VALUES = new ArrayList(10);
3078,method,,call,newCurveInterpolation,       public static final CurveInterpolation LINEAR = new CurveInterpolation("LINEAR");
3079,method,,call,newCurveInterpolation,       public static final CurveInterpolation GEODESIC = new CurveInterpolation("GEODESIC");
3080,method,,call,newCurveInterpolation,       public static final CurveInterpolation CIRCULAR_ARC_3_POINTS = new CurveInterpolation(                                          "CIRCULAR_ARC_3_POINTS");
3081,method,,call,newCurveInterpolation,        public static final CurveInterpolation CIRCULAR_ARC_2_POINTS_WITH_BULGE = new CurveInterpolation(                                          "CIRCULAR_ARC_2_POINTS_WITH_BULGE");
3082,method,,call,newCurveInterpolation,        public static final CurveInterpolation ELLIPTICAL = new CurveInterpolation(                                          "ELLIPTICAL");
3083,method,,call,newCurveInterpolation,        public static final CurveInterpolation CLOTHOID = new CurveInterpolation(                                          "CLOTHOID");
3084,method,,call,newCurveInterpolation,       public static final CurveInterpolation CONIC = new CurveInterpolation(                                          "CONIC");
3085,method,,call,newCurveInterpolation,        public static final CurveInterpolation POLYNOMIAL_SPLINE = new CurveInterpolation(                                          "POLYNOMIAL_SPLINE");
3086,method,,call,newCurveInterpolation,        public static final CurveInterpolation CUBIC_SPLINE = new CurveInterpolation(                                          "CUBIC_SPLINE");
3087,method,,call,newCurveInterpolation,        public static final CurveInterpolation RATIONAL_SPLINE = new CurveInterpolation(                                          "RATIONAL_SPLINE");
3088,method,,definition,CurveInterpolation,        public CurveInterpolation(final String name) {
3091,method,,definition,values,       public static CurveInterpolation[] values() {
3093,method,,call,VALUES.toArray,            return (CurveInterpolation[]) VALUESDottttTtoArray(new CurveInterpolation[VALUESDottttTsize()]);
3093,method,,call,VALUES.size,            return (CurveInterpolation[]) VALUESDottttTtoArray(new CurveInterpolation[VALUESDottttTsize()]);
3096,method,,definition,family,       public CodeList[] family() {
3097,method,,call,values,        return values();
3104,method,,call,getCurve,       public Curve getCurve();
3105,method,,call,getInterpolation,       public CurveInterpolation getInterpolation();
3106,method,,call,getNumDerivativesAtStart,       public int getNumDerivativesAtStart();
3107,method,,call,getNumDerivativeInterior,       public int getNumDerivativeInterior();
3108,method,,call,getNumDerivativesAtEnd,       public int getNumDerivativesAtEnd();
3109,method,,call,getSamplePoints,       public PointArray getSamplePoints();
3110,method,,call,getBoundary,       public CurveBoundary getBoundary();
3111,method,,call,reverse,       public CurveSegment reverse();
3116,method,,call,getComposite,          public CompositeCurve getComposite();
3120,method,,call,getOrientation,       public int getOrientation();
3121,method,,call,getPrimitive,       public Primitive getPrimitive();
3126,method,,call,getComposite,          public CompositeSurface getComposite();
3132,method,,call,getPosition,       public DirectPosition getPosition();
3133,method,,call,getBearing,          public Bearing getBearing(Position toPoint);
3141,method,,call,getContainedPrimitives,          public Set getContainedPrimitives();
3142,method,,call,getContainingPrimitives,       public Set getContainingPrimitives();
3143,method,,call,getComplexes,       public Set getComplexes();
3144,method,,call,]getProxy,       public OrientablePrimitive[] getProxy();
3157,method,,call,getCoordinateReferenceSystem,       public CoordinateReferenceSystem getCoordinateReferenceSystem();
3158,method,,call,createPrimitive,       public Primitive createPrimitive(Envelope envelope);
3159,method,,call,createDirectPosition,       public DirectPosition createDirectPosition(double[] coordinates);
3160,method,,call,createPoint,       public Point createPoint(double[] coordinates);
3161,method,,call,createPoint,       public Point createPoint(Position position);
3162,method,,call,createCurve,       public Curve createCurve(List segments);
3163,method,,call,createSurface,       public Surface createSurface(List surfaces);
3164,method,,call,createSurface,       public Surface createSurface(SurfaceBoundary boundary);
3165,method,,call,createSolid,       public Solid createSolid(SolidBoundary boundary);
3170,method,,call,isSimple,       public boolean isSimple();
3175,method,,call,isSimple,       public boolean isSimple();
3179,method,,call,getArea,          public double getArea();
3180,method,,call,getVolume,       public double getVolume();
3184,method,,call,getExterior,       public Shell getExterior();
3185,method,,call,]getInteriors,       public Shell[] getInteriors();
3191,method,,call,getPatches,       public List getPatches();
3195,method,,call,getExterior,       public Ring getExterior();
3196,method,,call,]getInteriors,       public Ring[] getInteriors();
3204,method,,call,newArrayList,       private static final List VALUES = new ArrayList(10);
3205,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation NONE = new SurfaceInterpolation(                                            "NONE");
3206,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation PLANAR = new SurfaceInterpolation(                                            "PLANAR");
3207,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation SPHERICAL = new SurfaceInterpolation(                                            "SPHERICAL");
3208,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation ELLIPTICAL = new SurfaceInterpolation(                                            "ELLIPTICAL");
3209,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation CONIC = new SurfaceInterpolation(                                            "CONIC");
3210,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation TIN = new SurfaceInterpolation(                                            "TIN");
3211,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation PARAMETRIC_CURVE = new SurfaceInterpolation(                                            "PARAMETRIC_CURVE");
3212,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation POLYNOMIAL_SPLINE = new SurfaceInterpolation(                                            "POLYNOMIAL_SPLINE");
3213,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation RATIONAL_SPLINE = new SurfaceInterpolation(                                            "RATIONAL_SPLINE");
3214,method,,call,newSurfaceInterpolation,       public static final SurfaceInterpolation TRIANGULATED_SPLINE = new SurfaceInterpolation(                                            "TRIANGULATED_SPLINE");
3215,method,,definition,SurfaceInterpolation,       public SurfaceInterpolation(final String name) {
3218,method,,definition,values,       public static SurfaceInterpolation[] values() {
3220,method,,call,VALUES.toArray,            return (SurfaceInterpolation[]) VALUESDottttTtoArray(new SurfaceInterpolation[VALUESDottttTsize()]);
3220,method,,call,VALUES.size,            return (SurfaceInterpolation[]) VALUESDottttTtoArray(new SurfaceInterpolation[VALUESDottttTsize()]);
3223,method,,definition,family,       public CodeList[] family() {
3224,method,,call,values,        return values();
3230,method,,call,getSurface,       public Surface getSurface();
3231,method,,call,getInterpolation,       public SurfaceInterpolation getInterpolation();
3232,method,,call,getNumDerivativesOnBoundary,       public int getNumDerivativesOnBoundary();
3233,method,,call,getBoundary,       public SurfaceBoundary getBoundary();
3237,method,,call,contains,       public boolean contains(TransfiniteSet pointSet);
3238,method,,call,contains,       public boolean contains(DirectPosition point);
3239,method,,call,intersects,       public boolean intersects(TransfiniteSet pointSet);
3240,method,,call,equals,       public boolean equals(TransfiniteSet pointSet);
3241,method,,call,union,       public TransfiniteSet union(TransfiniteSet pointSet);
3242,method,,call,intersection,       public TransfiniteSet intersection(TransfiniteSet pointSet);
3243,method,,call,difference,       public TransfiniteSet difference(TransfiniteSet pointSet);
3244,method,,call,symmetricDifference,       public TransfiniteSet symmetricDifference(TransfiniteSet pointSet);
3248,method,,call,clone,       public Object clone();
3260,method,,definition,CodeList,       protected CodeList(String name, final Collection values) {
3261,method,,call,name=,        thisDottttTname = (name=nameDottttTtrim());
3261,method,,call,name.trim,        thisDottttTname = (name=nameDottttTtrim());
3263,method,,call,values.size,            thisDottttTordinal = valuesDottttTsize();
3264,method,,call,values.add,                        if (!valuesDottttTadd(this)) {
3265,method,,call,IllegalArgumentException,                throw new IllegalArgumentException(StringDottttTvalueOf(values));
3265,method,,call,String.valueOf,                throw new IllegalArgumentException(StringDottttTvalueOf(values));
3269,method,,definition,contains,       private static boolean contains(final Collection values, final String name) {
3270,method,,call,values.iterator,        for (final Iterator it=valuesDottttTiterator();
3271,method,,call,hasNext, itDottttThasNext();
3273,method,,call,code=,            final CodeList code = (CodeList) itDottttTnext();
3273,method,,call,it.next,            final CodeList code = (CodeList) itDottttTnext();
3274,method,,call,name.equalsIgnoreCase,            if (nameDottttTequalsIgnoreCase(codeDottttTname)) {
3280,method,,definition,ordinal,       public final int ordinal() {
3283,method,,definition,name,       public final String name() {
3286,method,,call,]family,       public abstract CodeList[] family();
3287,method,,definition,toString,       public String toString() {
3288,method,,call,=getClass,        String classname = getClass()DottttTgetName();
3288,method,,call,getClass().getName,        String classname = getClass()DottttTgetName();
3289,method,,call,classname.lastIndexOf,        final int i = classnameDottttTlastIndexOf('DottttT');
3291,method,,call,classname.substring,            classname = classnameDottttTsubstring(i+1);
3295,method,,call,readResolve,       protected Object readResolve() throws ObjectStreamException {
3296,method,,call,=family,        final CodeList[] codes = family();
3300,method,,call,name.equals,                        if (nameDottttTequals(codes[i]DottttTname)) {
3304,method,,call,InvalidObjectException,        throw new InvalidObjectException(toString());
3304,method,,call,(toString,        throw new InvalidObjectException(toString());
3310,method,,definition,NoSuchEnumerationException,           public NoSuchEnumerationException(final int value) {
3314,method,,definition,getValue,           public int getValue() {
3326,method,,definition,loadIconResource,                   protected static Icon loadIconResource(Class a_class, String name) {
3327,method,,call,a_class.getResource,        URL iconURL = a_classDottttTgetResource(name);
3329,method,,call,getNullIcon,            return getNullIcon();
3331,method,,call,ImageIcon,        return new ImageIcon(iconURL);
3333,method,,definition,getNullIcon,       public static Icon getNullIcon() {
3336,method,,call,newNullIcon,                   private final static Icon NULL_ICON = new NullIcon();
3339,method,,definition,SimpleEnumerationType,                   protected SimpleEnumerationType(Collection values, String name, String description) {
3342,method,,call,=getNullIcon,        thisDottttTicon = getNullIcon();
3344,method,,definition,SimpleEnumerationType,       protected SimpleEnumerationType(Collection values, String name, String description, Icon icon) {
3349,method,,definition,toString,                   public String toString() {
3350,method,,call,name,        return name();
3352,method,,definition,getDescription,                   public String getDescription() {
3355,method,,definition,getIcon,       public Icon getIcon() {
3358,method,,definition,compareTo,                   public int compareTo(Object obj) {
3360,method,,call,this.getClass,        if (thisDottttTgetClass() != objDottttTgetClass()) {
3360,method,,call,obj.getClass,        if (thisDottttTgetClass() != objDottttTgetClass()) {
3361,method,,call,ClassCastException,            throw new ClassCastException("Can't compare " +                                            thisDottttTgetClass()DottttTgetName() +                                            " to " +                                            objDottttTgetClass()DottttTgetName());
3361,method,,call,this.getClass,            throw new ClassCastException("Can't compare " +                                            thisDottttTgetClass()DottttTgetName() +                                            " to " +                                            objDottttTgetClass()DottttTgetName());
3361,method,,call,this.getClass().getName,            throw new ClassCastException("Can't compare " +                                            thisDottttTgetClass()DottttTgetName() +                                            " to " +                                            objDottttTgetClass()DottttTgetName());
3361,method,,call,obj.getClass,            throw new ClassCastException("Can't compare " +                                            thisDottttTgetClass()DottttTgetName() +                                            " to " +                                            objDottttTgetClass()DottttTgetName());
3361,method,,call,obj.getClass().getName,            throw new ClassCastException("Can't compare " +                                            thisDottttTgetClass()DottttTgetName() +                                            " to " +                                            objDottttTgetClass()DottttTgetName());
3364,method,,call,this.ordinal,            rv = thisDottttTordinal() - ((SimpleEnumerationType)obj)DottttTordinal();
3364,method,,call,this.ordinal()-,            rv = thisDottttTordinal() - ((SimpleEnumerationType)obj)DottttTordinal();
3364,method,,call,-(,            rv = thisDottttTordinal() - ((SimpleEnumerationType)obj)DottttTordinal();
3364,method,,call,(().ordinal,            rv = thisDottttTordinal() - ((SimpleEnumerationType)obj)DottttTordinal();
3369,method,,definition,getIconHeight,        public int getIconHeight() {
3372,method,,definition,getIconWidth,        public int getIconWidth() {
3375,method,,definition,paintIcon,        public void paintIcon(Component c, Graphics g, int x, int y) {
19,new,new 
20,new,new 
21,new,new 
22,new,new 
23,new,new 
24,new,new 
25,new,new 
26,new,new 
27,new,new 
28,new,new 
29,new,new 
30,new,new 
31,new,new 
32,new,new 
33,new,new 
76,new,new 
77,new,new 
78,new,new 
175,new,new 
176,new,new 
177,new,new 
207,new,new 
208,new,new 
209,new,new 
210,new,new 
211,new,new 
309,new,new 
310,new,new 
311,new,new 
312,new,new 
313,new,new 
314,new,new 
315,new,new 
316,new,new 
317,new,new 
318,new,new 
319,new,new 
320,new,new 
657,new,new 
658,new,new 
659,new,new 
660,new,new 
829,new,new 
830,new,new 
833,new,new 
848,new,new 
848,new,new new 
925,new,new 
926,new,new 
936,new,new 
955,new,new 
956,new,new 
957,new,new 
1097,new,new 
1098,new,new 
1099,new,new 
1119,new,new 
1141,new,new 
1142,new,new 
1143,new,new 
1144,new,new 
1145,new,new 
1147,new,new 
1166,new,new 
1167,new,new 
1168,new,new 
1209,new,new 
1299,new,new 
1353,new,new 
1368,new,new 
1522,new,new 
1533,new,new 
1741,new,new 
1848,new,new 
1849,new,new 
1850,new,new 
1851,new,new 
1870,new,new 
1871,new,new 
1872,new,new 
1873,new,new 
1874,new,new 
1944,new,new 
2287,new,new 
2288,new,new 
2289,new,new 
2290,new,new 
2291,new,new 
2292,new,new 
2293,new,new 
2294,new,new 
2295,new,new 
2296,new,new 
2297,new,new 
2298,new,new 
2299,new,new 
2300,new,new 
2483,new,new 
2484,new,new 
2485,new,new 
2523,new,new 
2524,new,new 
2525,new,new 
2526,new,new 
2527,new,new 
2528,new,new 
2529,new,new 
3077,new,new 
3078,new,new 
3079,new,new 
3080,new,new 
3081,new,new 
3082,new,new 
3083,new,new 
3084,new,new 
3085,new,new 
3086,new,new 
3087,new,new 
3204,new,new 
3205,new,new 
3206,new,new 
3207,new,new 
3208,new,new 
3209,new,new 
3210,new,new 
3211,new,new 
3212,new,new 
3213,new,new 
3214,new,new 
3336,new,new 
